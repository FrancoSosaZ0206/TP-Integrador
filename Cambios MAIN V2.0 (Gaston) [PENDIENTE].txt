////////////////////////////////

FUNCIONES ASISTENTES
ESTAN EN MENUS.C

///////////////////////////////


int MenuTipoSeleccion()
{
    int eleccion = 0;
    system("cls");
    limpiarBufferTeclado();
    printf("Menu de seleccion \n");
    printf("1. Mediante indice unico [Posicion 1] \n");
    printf("2. Mediante conjunto de indices [Posicion 1,4,5,7,6] \n");
    printf("3. Mediante seleccion de 2 indices [Posicion 1 - 4 (1,2,3,4)] \n");
    printf("Opcion: ");
    scanf("%d", &eleccion);
}

int MenuDeseaContinuar()
{
    int eleccion = 0;
    system("cls");
    limpiarBufferTeclado();
    printf(" Menu desea continuar ? \n");
    printf("0. NO \n");
    printf("1. SI \n");
    printf("Opcion: ");
    scanf("%d", &eleccion);
    limpiarBufferTeclado();
    return eleccion;
}



////////////////////////////////

FUNCIONES ASISTENTES
ESTAN EN MENUS.C

///////////////////////////////

bool numeroValido(int numero){
    if(numero>0){
        return true;
    }else{
        system("cls");
        printf("Numero incorrecto \n");
        printf("No existe la posibilidad de contar negativamente \n");
        printf("Vuelva a ingresar al menu nuevamente \n");
        printf("Presione [ ENTER ] para continuar... ");
        limpiarBufferTeclado();
        getchar();
        limpiarBufferTeclado();
        system("cls");
        return false;
    }
}

int solicitarEnteroPorConsola()
{
    int eleccion = 0;
    if(ShowHelp)
    {
        printf("Seleccione un numero\n");
        printf("Formato adecuado [ Numero elegido > 0 ] : ");
    }
    limpiarBufferTeclado();
    scanf("%d", &eleccion);
    limpiarBufferTeclado();
    return eleccion;
}

int seleccionarNumero()
{
    int eleccion = 0;
    bool valido = false;
    while(!valido)
    {
        eleccion = solicitarEnteroPorConsola();
        valido = numeroValido(eleccion);
    }
    return eleccion;
}

bool verificarLimiteLista(ListaPtr lista, int eleccion){
    limpiarBufferTeclado();
    system("cls");
    bool valido;
    int tamanioLista=longitudLista(lista);
    if(tamanioLista!=0){
        if(eleccion>=0 && eleccion<tamanioLista){
            valido=true;
        }else{
            printf("Eleccion invalida\n");
            printf("La lista que ha seleccionado no posee ese indice\n");
            valido=false;
        }
    }else{
        printf("La lista que desea visualizar no posee elementos\n");
        valido=false;
    }
    limpiarBufferTeclado();
    return valido;
}

void mensajeError(){
    system("cls");
    limpiarBufferTeclado();
    printf("No ha seguido las instrucciones indicadas\n");
    printf("El servicio procedera a realizar la ejecucion de salida\n");
    printf("Volviendo al menu seleccionado\n");
    limpiarBufferTeclado();
    system("pause");
    system("cls");
}


/////////////////////////////////////////////

TODAS LAS FUNCIONES DE AQUI EN ADELNATE
CORRESPONDEN A LA SECCION DE MENUS.C

////////////////////////////////////////////


/////////////////////////////////////////////

SECCION DE ELIMINACION

////////////////////////////////////////////

void menuEliminarPaqueteNuevo(CentroLogisticoPtr centroLogistico)
{
    int MainMenu = 0;
    int iElim = 0;
    int cantidadRemover;
    int PosicionInicial,PosicionFinal;
    int DeseaContinuar = 0;
    int eleccionesRemover[100];
    int verificacionElecciones;
    PaquetePtr paqueteRemovido;
    ListaPtr listaAuxiliar = getPaquetes(centroLogistico);
    int cantidadTotalLista = longitudLista(listaAuxiliar);
    do
    {
        system("cls");
        printf("ELIMINAR PAQUETE\n\n");
        MainMenu = MenuTipoSeleccion();
        switch(MainMenu)
        {
            case 1:
                ///mostrarPaquetes(centroLogistico);
                printf("Seleccione un indice para remover: ");
                iElim = seleccionarNumero();
                if(verificarLimiteLista(listaAuxiliar,iElim))
                {
                    paqueteRemovido=removerPaquete(centroLogistico,iElim);
                    paqueteRemovido=destruirPaquete(paqueteRemovido);
                }
            break;
            case 2:
                ///mostrarPaquetes(centroLogistico);
                printf("A modo de ayuda [Cantidad total de paquetes] : %d \n", cantidadTotalLista);
                printf("Seleccione la cantidad de indices a remover \n");
                cantidadRemover = seleccionarNumero();
                for(int i=0;i<cantidadRemover;i++)
                {
                    printf("Indice numero %d: ", i+1);
                    eleccionesRemover[i] = seleccionarNumero();
                }
                for(int i=0;i<cantidadRemover;i++)
                {
                    if(verificarLimiteLista(listaAuxiliar,eleccionesRemover[i]))
                    {
                         verificacionElecciones++;
                    }
                }
                if(eleccionesRemover==cantidadRemover)
                {
                    for(int i=0;i<cantidadRemover;i++)
                    {
                        paqueteRemovido = removerPaquete(centroLogistico, eleccionesRemover[i]-i);
                        paqueteRemovido = destruirPaquete(paqueteRemovido);
                    }
                }
            break;
            case 3:
                ///mostrarPaquetes(centroLogistico);
                printf("Seleccione de indice a indice para remover \n");
                printf("Primer indice: ");
                PosicionInicial = seleccionarNumero();
                printf("Segundo indice: ");
                PosicionFinal = seleccionarNumero();
                if(verificarLimiteLista(listaAuxiliar,PosicionFinal))
                {
                    for(int i=0;i<PosicionFinal-PosicionInicial+1;i++)
                    {
                        paqueteRemovido = removerPaquete(centroLogistico, PosicionInicial);
                        paqueteRemovido = destruirPaquete(paqueteRemovido);
                    }
                }
            break;
            default:
                mensajeError();
            break;
        }
    }while(DeseaContinuar!=0);
}

void menuEliminarPersonaNuevo(CentroLogisticoPtr centroLogistico, bool esChofer)
{
    int MainMenu = 0;
    int iElim = 0;
    int cantidadRemover;
    int PosicionInicial,PosicionFinal;
    int DeseaContinuar = 0;
    int eleccionesRemover[100];
    int verificacionElecciones;
    PersonaPtr personaRemovida;
    ListaPtr listaAuxiliar = getPersonas(centroLogistico);
    int cantidadTotalLista = longitudLista(listaAuxiliar);
    do
    {
        system("cls");
        if(esChofer)
        {
            printf("ELIMINAR CHOFER \n")
        }
        else
        {
            printf("ELIMINAR CLIENTE \n");
        }
        MainMenu = MenuTipoSeleccion();
        switch(MainMenu)
        {
            case 1:
                /*if(esChofer)
                {
                    mostrarChoferes(centroLogistico);
                }
                else
                {
                    mostrarClientes(centroLogistico);
                }*/
                printf("Seleccione un indice para remover: ");
                iElim = seleccionarNumero();
                if(verificarLimiteLista(listaAuxiliar,iElim))
                {
                    personaRemovida = removerPersona(centroLogistico,iElim);
                    personaRemovida = destruirPersona(personaRemovida);
                }
            break;
            case 2:
                /*if(esChofer)
                {
                    mostrarChoferes(centroLogistico);
                }
                else
                {
                    mostrarClientes(centroLogistico);
                }*/
                printf("A modo de ayuda [Cantidad total de paquetes] : %d \n", cantidadTotalLista);
                printf("Seleccione la cantidad de indices a remover \n");
                cantidadRemover = seleccionarNumero();
                for(int i=0;i<cantidadRemover;i++)
                {
                    printf("Indice numero %d: ", i+1);
                    eleccionesRemover[i] = seleccionarNumero();
                }
                for(int i=0;i<cantidadRemover;i++)
                {
                    if(verificarLimiteLista(listaAuxiliar,eleccionesRemover[i]))
                    {
                         verificacionElecciones++;
                    }
                }
                if(eleccionesRemover==cantidadRemover)
                {
                    for(int i=0;i<cantidadRemover;i++)
                    {
                        personaRemovida = removerPersona(centroLogistico, eleccionesRemover[i]-i);
                        personaRemovida = destruirPersona(personaRemovida);
                    }
                }
            break;
            case 3:
                /*if(esChofer)
                {
                    mostrarChoferes(centroLogistico);
                }
                else
                {
                    mostrarClientes(centroLogistico);
                }*/
                printf("Seleccione de indice a indice para remover \n");
                printf("Primer indice: ");
                PosicionInicial = seleccionarNumero();
                printf("Segundo indice: ");
                PosicionFinal = seleccionarNumero();
                if(verificarLimiteLista(listaAuxiliar,PosicionFinal))
                {
                    for(int i=0;i<PosicionFinal-PosicionInicial+1;i++)
                    {
                        personaRemovida = removerPersona(centroLogistico, PosicionInicial);
                        personaRemovida = destruirPersona(personaRemovida);
                    }
                }
            break;
            default:
                mensajeError();
            break;
        }
    }while(DeseaContinuar!=0);
}


void menuEliminarVehiculoNuevo(CentroLogisticoPtr centroLogistico)
{
    int MainMenu = 0;
    int iElim = 0;
    int cantidadRemover;
    int PosicionInicial,PosicionFinal;
    int DeseaContinuar = 0;
    int eleccionesRemover[100];
    int verificacionElecciones;
    VehiculoPtr vehiculoRemovido;
    ListaPtr listaAuxiliar = getPersonas(centroLogistico);
    int cantidadTotalLista = longitudLista(listaAuxiliar);
    do
    {
        system("cls");
        printf("ELIMINAR VEHICULO \n");
        MainMenu = MenuTipoSeleccion();
        switch(MainMenu)
        {
            case 1:
                ///mostrarVehiculos(centroLogistico);
                printf("Seleccione un indice para remover: ");
                iElim = seleccionarNumero();
                if(verificarLimiteLista(listaAuxiliar,iElim))
                {
                    vehiculoRemovido = removerVehiculo(centroLogistico,iElim);
                    vehiculoRemovido = destruirVehiculo(vehiculoRemovido);
                }
            break;
            case 2:
                ///mostrarVehiculos(centroLogistico);
                printf("A modo de ayuda [Cantidad total de paquetes] : %d \n", cantidadTotalLista);
                printf("Seleccione la cantidad de indices a remover \n");
                cantidadRemover = seleccionarNumero();
                for(int i=0;i<cantidadRemover;i++)
                {
                    printf("Indice numero %d: ", i+1);
                    eleccionesRemover[i] = seleccionarNumero();
                }
                for(int i=0;i<cantidadRemover;i++)
                {
                    if(verificarLimiteLista(listaAuxiliar,eleccionesRemover[i]))
                    {
                         verificacionElecciones++;
                    }
                }
                if(eleccionesRemover==cantidadRemover)
                {
                    for(int i=0;i<cantidadRemover;i++)
                    {
                        vehiculoRemovido = removerVehiculo(centroLogistico, eleccionesRemover[i]-i);
                        vehiculoRemovido = destruirVehiculo(vehiculoRemovido);
                    }
                }
            break;
            case 3:
                ///mostrarVehiculos(centroLogistico);
                printf("Seleccione de indice a indice para remover \n");
                printf("Primer indice: ");
                PosicionInicial = seleccionarNumero();
                printf("Segundo indice: ");
                PosicionFinal = seleccionarNumero();
                if(verificarLimiteLista(listaAuxiliar,PosicionFinal))
                {
                    for(int i=0;i<PosicionFinal-PosicionInicial+1;i++)
                    {
                        vehiculoRemovido = removerVehiculo(centroLogistico, PosicionInicial);
                        vehiculoRemovido = destruirVehiculo(vehiculoRemovido);
                    }
                }
            break;
            default:
                mensajeError();
            break;
        }
    }while(DeseaContinuar!=0);
}

void menuEliminarRepartoNuevo(CentroLogisticoPtr centroLogistico, bool esRepartoAbierto)
{
    int MainMenu = 0;
    int iElim = 0;
    int cantidadRemover;
    int PosicionInicial,PosicionFinal;
    int DeseaContinuar = 0;
    int eleccionesRemover[100];
    int verificacionElecciones;
    RepartoPtr repartoRemovido;
    ListaPtr listaAuxiliar = getPersonas(centroLogistico);
    int cantidadTotalLista = longitudLista(listaAuxiliar);
    do
    {
        system("cls");
        /*if(esRepartoAbierto)
        {
            printf("ELIMINAR REPARTO ABIERTO \n");
        }
        else
        {
            printf("ELIMINAR REPARTO CERRADO \n");
        }*/
        MainMenu = MenuTipoSeleccion();
        switch(MainMenu)
        {
            case 1:
                ///mostrarRepartos(centroLogistico,esRepartoAbierto);
                printf("Seleccione un indice para remover: ");
                iElim = seleccionarNumero();
                if(verificarLimiteLista(listaAuxiliar,iElim))
                {
                    repartoRemovido = removerReparto(centroLogistico,iElim);
                    repartoRemovido = destruirReparto(repartoRemovido);
                }
            break;
            case 2:
                ///mostrarRepartos(centroLogistico,esRepartoAbierto);
                printf("A modo de ayuda [Cantidad total de paquetes] : %d \n", cantidadTotalLista);
                printf("Seleccione la cantidad de indices a remover \n");
                cantidadRemover = seleccionarNumero();
                for(int i=0;i<cantidadRemover;i++)
                {
                    printf("Indice numero %d: ", i+1);
                    eleccionesRemover[i] = seleccionarNumero();
                }
                for(int i=0;i<cantidadRemover;i++)
                {
                    if(verificarLimiteLista(listaAuxiliar,eleccionesRemover[i]))
                    {
                         verificacionElecciones++;
                    }
                }
                if(eleccionesRemover==cantidadRemover)
                {
                    for(int i=0;i<cantidadRemover;i++)
                    {
                        repartoRemovido = removerReparto(centroLogistico, eleccionesRemover[i]-i,esRepartoAbierto);
                        repartoRemovido = destruirReparto(repartoRemovido);
                    }
                }
            break;
            case 3:
                ///mostrarRepartos(centroLogistico,esRepartoAbierto);
                printf("Seleccione de indice a indice para remover \n");
                printf("Primer indice: ");
                PosicionInicial = seleccionarNumero();
                printf("Segundo indice: ");
                PosicionFinal = seleccionarNumero();
                if(verificarLimiteLista(listaAuxiliar,PosicionFinal))
                {
                    for(int i=0;i<PosicionFinal-PosicionInicial+1;i++)
                    {
                        repartoRemovido = removerReparto(centroLogistico, PosicionInicial, esRepartoAbierto);
                        repartoRemovido = destruirReparto(repartoRemovido);
                    }
                }
            break;
            default:
                mensajeError();
            break;
        }
    }while(DeseaContinuar!=0);
}



/////////////////////////////////////////////

SECCION DE MODIFICACION

////////////////////////////////////////////


void cambiarPaquete(PaquetePtr paqueteAModificar)
{
    int nAncho,nAlto,nLargo,nPeso,nEstado,seguirMod;
    DomicilioPtr nuevaDirRetiro;
    DomicilioPtr nuevaDirEntrega;
    FechaPtr nuevaFechaEntrega;
    do
    {
        system("cls");
        ///printf("Ha elegido el ");
        ///mostrarPaquete(paqueteAModificar);
        printf("\n\nQué desea modificar?\n\n");
        printf("1. Ancho\n");
        printf("2. Alto\n");
        printf("3. Largo\n");
        printf("4. Peso\n");
        printf("5. Direccion de Retiro\n");
        printf("6. Direccion de Entrega\n");
        printf("7. Fecha de Entrega\n");
        printf("8. Estado\n");
        printf("Seleccione una opcion: ");
        limpiarBufferTeclado();
        scanf("%d",&op);
        switch(op)
        {
        case 1:
            printf("\n\nIngrese el nuevo ancho: ");
            limpiarBufferTeclado();
            scanf("%d",&nAncho);
            setAncho(paqueteAModificar,nAncho);
            break;
        case 2:
            printf("\n\nIngrese el nuevo alto: ");
            limpiarBufferTeclado();
            scanf("%d",&nAlto);
            setAlto(paqueteAModificar,nAlto);
            break;
        case 3:
            printf("\n\nIngrese el nuevo largo: ");
            limpiarBufferTeclado();
            scanf("%d",&nLargo);
            setLargo(paqueteAModificar,nLargo);
            break;
        case 4:
            printf("\n\nIngrese el nuevo peso: ");
            limpiarBufferTeclado();
            scanf("%d",&nPeso);
            setPeso(paqueteAModificar,nPeso);
            break;
        case 5:
            printf("\n\nIngrese la nueva direccion de retiro:");
            actualizarDomicilio(nuevaDirRetiro);
            setDirRetiro(paqueteAModificar,nuevaDirRetiro);
            break;
        case 6:
            printf("\n\nIngrese la nueva direccion de entrega:");
            actualizarDomicilio(nuevaDirEntrega);
            setDirEntrega(paqueteAModificar,nuevaDirEntrega);
            break;
        case 7:
            printf("\n\nIngrese la nueva fecha y horario de entrega: ");
            actualizarFecha(nuevaFechaEntrega);
            setFechaEntrega(paqueteAModificar,nuevaFechaEntrega);
            break;
        case 8:
            helpEstadoPaquete();
            printf("\n\nIngrese el nuevo estado: ");
            limpiarBufferTeclado();
            scanf("%d",&nEstado);
            setEstado(paqueteAModificar,nEstado);
            break;
        default:
            printf("\nOpcion incorrecta.\n\n");
            presionarEnterYLimpiarPantalla();
            break;
        }
        printf("\n\nDatos modificados exitosamente.\n\n");
        printf("Desea seguir modificando este paquete?\n\n");
        printf("\t1. SI\n\t");
        printf("0. NO\n\n");
        printf("Seleccione una opcion: ");
        limpiarBufferTeclado();
        scanf("%d",&seguirMod);
    }while(seguirMod!=0);
}

void menuModificarPaquete(CentroLogisticoPtr centroLogistico)
{
    int iMod=0;
    int op=0;
    int DeseaContinuar = 0;
    int MainMenu = 0;
    int cantidadModificar;
    int verificacionElecciones;
    int PosicionInicial, PosicionFinal;
    int eleccionesModificar[100];
    PaquetePtr paqueteModificar;
    ListaPtr listaAuxiliar = getPaquetes(centroLogistico);
    do
    {
        system("cls");
        printf("MODIFICAR PAQUETE \n");
        MainMenu = MenuTipoSeleccion();
        switch(MainMenu)
        {
        case 1:
            printf("Seleccione un indice para modificar \n");
            iMod = seleccionarNumero();
            paqueteModificar = getDatoLista(listaAuxiliar,iMod-1);
            cambiarPaquete(paqueteModificar);
        break;
        case 2:
            printf("Seleccione una cantidad de indices para modificar \n");
            cantidadModificar = seleccionarNumero();
            for(int i=0;i<cantidadModificar;i++)
            {
                printf("Indice numero %d: ");
                eleccionesModificar[i] = seleccionarNumero();
            }
            for(int i=0;i<cantidadModificar;i++)
            {
                if(verificarLimiteLista(listaAuxiliar,eleccionesModificar[i]))
                {
                    verificacionElecciones++;
                }
            }
            if(verificacionElecciones==5)
            {
                for(int i=0;i<cantidadModificar;i++)
                {
                    paqueteModificar = getDatoLista(listaAuxiliar, eleccionesModificar[i]);
                    cambiarPaquete(paqueteModificar);
                }
            }
        break;
        case 3:
            printf("Seleccione los 2 indices en los cuales modificar \n");
            printf("Primer indice: ");
            PosicionInicial = seleccionarNumero();
            printf("Segundo indice: ");
            PosicionFinal = seleccionarNumero();
            if(verificarLimiteLista(PosicionFinal))
            {
                for(int i=0;i<PosicionFinal-PosicionInicial+1;i++)
                {
                    paqueteModificar = getDatoLista(listaAuxiliar, i);
                    cambiarPaquete(paqueteModificar);
                }
            }
        break;
        default:
            mensajeError();
        break;
        }
        DeseaContinuar = MenuDeseaContinuar();
    }while(DeseaContinuar!=0);
}


void cambiarPersona(PersonaPtr personaAModificar, bool esChofer)
{
    int seguirMod=0;
    char nNombre[100];
    char nApellido[100];
    DomicilioPtr nuevoDomicilio;
    CuilPtr nuevoCuil;
    do
    {
        system("cls");
        printf("Ha elegido - ");
        ///mostrarPersona(personaAModificar);
        printf("\n\nQué desea modificar?\n\n");
        printf("1. Nombre y Apellido\n");
        printf("2. Domicilio\n");
        printf("3. CUIL\n");
        if(esChofer)
        {
            printf("4. Cambiar persona a: CLIENTE\n");
        }
        else
        {
            printf("4. Cambiar persona a: CHOFER\n");
        }
        printf("Seleccione una opcion: ");
        scanf("%d",&op);
        switch(op)
        {
            case 1:
                printf("\n\nIngrese el nuevo nombre y apellido de esta manera:");
                printf("\n\t[Nombre];[Apellido]\n\t");
                scanf("%[^;]%*c;%[^\n]%*c",nNombre,nApellido);
                setNombre(personaAModificar,nNombre);
                setApellido(personaAModificar,nApellido);
            break;
            case 2:
                printf("\n\nIngrese el nuevo domicilio:");
                actualizarDomicilio(nuevoDomicilio);
                setDomicilio(personaAModificar,nuevoDomicilio);
            break;
            case 3:
                actualizarCuil(nuevoCuil);
                setCuilPersona(personaAModificar,nuevoCuil);
            break;
            case 4:
                if(esChofer)
                {
                    setEsChofer(personaAModificar,false);
                }
                else
                {
                    setEsChofer(personaAModificar,true);
                }
            break;
            default:
                printf("\nOpcion incorrecta.\n\n");
                presionarEnterYLimpiarPantalla();
            break;
        }
        printf("\n\nDatos modificados exitosamente.\n\n");
        printf("Desea seguir modificando esta persona?\n\n");
        printf("\t1. SI\n\t");
        printf("0. NO\n\n");
        printf("Seleccione una opcion: ");
        scanf("%d",&seguirMod);
    } while(seguirMod!=0);
}


void menuModificarPersona(CentroLogisticoPtr centroLogistico,bool esChofer)
{
    int iMod=0;
    int op=0;
    int MainMenu;
    int iMod=0;
    int op=0;
    int DeseaContinuar = 0;
    int MainMenu = 0;
    int cantidadModificar;
    int verificacionElecciones;
    int PosicionInicial, PosicionFinal;
    int eleccionesModificar[100];
    PersonaPtr personaModificar;
    ListaPtr listaAuxiliar = getPersonas(centroLogistico);
    //esChofer se puede modificar sin crear una variable
    do
    {
        if(esChofer)
        {
            printf("MODIFICAR CHOFER\n\n");
            ///mostrarChoferes(centroLogistico);
            printf("\n\nIngrese indice del chofer a modificar: ");
        }
        else
        {
            printf("MODIFICAR CLIENTE\n\n");
            ///mostrarClientes(centroLogistico);
            printf("\n\nIngrese indice del cliente a modificar: ");
        }
            MainMenu = MenuTipoSeleccion();
            switch(MainMenu)
            {
            case 1:
                printf("Seleccione un indice para modificar \n");
                iMod = seleccionarNumero();
                personaModificar = getDatoLista(listaAuxiliar,iMod-1);
                cambiarPersona(personaModificar);
            break;
            case 2:
                printf("Seleccione una cantidad de indices para modificar \n");
                cantidadModificar = seleccionarNumero();
                for(int i=0;i<cantidadModificar;i++)
                {
                    printf("Indice numero %d: ");
                    eleccionesModificar[i] = seleccionarNumero();
                }
                for(int i=0;i<cantidadModificar;i++)
                {
                    if(verificarLimiteLista(listaAuxiliar,eleccionesModificar[i]))
                    {
                        verificacionElecciones++;
                    }
                }
                if(verificacionElecciones==5)
                {
                    for(int i=0;i<cantidadModificar;i++)
                    {
                        personaModificar = getDatoLista(listaAuxiliar, eleccionesModificar[i]);
                        cambiarPersona(personaModificar);
                    }
                }
            break;
            case 3:
                printf("Seleccione los 2 indices en los cuales modificar \n");
                printf("Primer indice: ");
                PosicionInicial = seleccionarNumero();
                printf("Segundo indice: ");
                PosicionFinal = seleccionarNumero();
                if(verificarLimiteLista(PosicionFinal))
                {
                    for(int i=0;i<PosicionFinal-PosicionInicial+1;i++)
                    {
                        personaModificar = getDatoLista(listaAuxiliar, i);
                        cambiarPersona(personaModificar);
                    }
                }
            break;
            default:
                mensajeError();
            break;
            }
        DeseaContinuar = MenuDeseaContinuar();
    }while(DeseaContinuar!=0);
}


void cambiarVehiculo(VehiculoPtr vehiculoAModificar)
{
    int nTipo=0;
    char nMarca[100];
    char nModelo[100];
    char nPatente[100];
    int seguirMod=0;
    do
    {
        system("cls");
        printf("Ha elegido - ");
        mostrarVehiculo(vehiculoAModificar);
        printf("\n\nQué desea modificar?\n\n");
        printf("1. Tipo de vehiculo\n");
        printf("2. Marca\n");
        printf("3. Modelo\n");
        printf("4. Patente\n");
        printf("Seleccione una opcion: ");
        scanf("%d",&op);
        switch(op)
        {
        case 1:
            printf("\n\n");
            helpTipoVehiculo();
            printf("\n\nSeleccione una opcion: ");
            scanf("%d",&nTipo);
            switch(nTipo)
            {
            case 1:
                setTipoVehiculo(vehiculoAModificar,1);
                break;
            case 2:
                setTipoVehiculo(vehiculoAModificar,2);
                break;
            case 3:
                setTipoVehiculo(vehiculoAModificar,3);
                break;
            default:
                printf("\nERROR: esa opcion no existe.\n\n");
                presionarEnterYLimpiarPantalla();
                break;
            }
            break;
        case 2:
            printf("\n\nIngrese la nueva marca:");
            scanf("%[^\n]%*c",nMarca);
            setMarca(vehiculoAModificar,nMarca);
            break;
        case 3:
            printf("\n\nIngrese el nuevo modelo:");
            scanf("%[^\n]%*c",nModelo);
            setModelo(vehiculoAModificar,nModelo);
            break;
        case 5:
            printf("\n\nIngrese la nueva patente (AA 111 AA):\n\t");
            scanf("%[^\n]%*c",nPatente);
            setPatente(vehiculoAModificar,nPatente);
            break;
        default:
            printf("\nOpcion incorrecta.\n\n");
            presionarEnterYLimpiarPantalla();
            break;
        }
        printf("\n\nDatos modificados exitosamente.\n\n");
        printf("Desea seguir modificando este vehiculo?\n\n");
        printf("\t1. SI\n\t");
        printf("0. NO\n\n");
        printf("Seleccione una opcion: ");
        scanf("%d",&seguirMod);
    } while(seguirMod!=0);
}


void menuModificarVehiculo(CentroLogisticoPtr centroLogistico)
{
    int iMod=0;
    int op=0;
    int MainMenu;
    int iMod=0;
    int op=0;
    int DeseaContinuar = 0;
    int MainMenu = 0;
    int cantidadModificar;
    int verificacionElecciones;
    int PosicionInicial, PosicionFinal;
    int eleccionesModificar[100];
    VehiculoPtr vehiculoModificar;
    ListaPtr listaAuxiliar = getVehiculos(centroLogistico);
    do
    {
        system("cls");
        printf("MODIFICAR VEHICULO \n");
        ///mostrarVehiculos(centroLogistico);
        MainMenu = MenuTipoSeleccion();
        switch(MainMenu)
        {
            case 1:
                printf("Seleccione un indice para modificar \n");
                iMod = seleccionarNumero();
                vehiculoModificar = getDatoLista(listaAuxiliar,iMod-1);
                cambiarVehiculo(vehiculoModificar);
            break;
            case 2:
                printf("Seleccione una cantidad de indices para modificar \n");
                cantidadModificar = seleccionarNumero();
                for(int i=0;i<cantidadModificar;i++)
                {
                    printf("Indice numero %d: ");
                    eleccionesModificar[i] = seleccionarNumero();
                }
                for(int i=0;i<cantidadModificar;i++)
                {
                    if(verificarLimiteLista(listaAuxiliar,eleccionesModificar[i]))
                    {
                        verificacionElecciones++;
                    }
                }
                if(verificacionElecciones==5)
                {
                    for(int i=0;i<cantidadModificar;i++)
                    {
                        vehiculoModificar = getDatoLista(listaAuxiliar, eleccionesModificar[i]);
                        cambiarVehiculo(vehiculoModificar);
                    }
                }
            break;
            case 3:
                printf("Seleccione los 2 indices en los cuales modificar \n");
                printf("Primer indice: ");
                PosicionInicial = seleccionarNumero();
                printf("Segundo indice: ");
                PosicionFinal = seleccionarNumero();
                if(verificarLimiteLista(PosicionFinal))
                {
                    for(int i=0;i<PosicionFinal-PosicionInicial+1;i++)
                    {
                        vehiculoModificar = getDatoLista(listaAuxiliar, i);
                        cambiarVehiculo(vehiculoModificar);
                    }
                }
            break;
            default:
                mensajeError();
            break;
        }
        DeseaContinuar = MenuDeseaContinuar();
    }while(DeseaContinuar!=0);
}


int MenuSeleccionAtributoReparto()
{
    system("cls");
    int eleccion;
    printf("Seleccione un atributo de [ REPARTO ] para modificar \n");
    printf("1. Chofer \n");
    printf("2. Vehiculo \n");
    printf("3. Fecha de salida \n");
    printf("4. Fecha de retorno \n");
    printf("5. Paquete \n");
    printf("Opcion: ");
    limpiarBufferTeclado();
    scanf("%d", &eleccion);
    limpiarBufferTeclado();
    return eleccion;
}


void cambiarAtributoReparto(RepartoPtr repartoModificar)
{
    int SubMenu;
    PersonaPtr choferModificar;
    VehiculoPtr vehiculoModificar;
    FechaPtr fechaModificar;
    PaquetePtr paqueteModificar;
    SubMenu = MenuSeleccionAtributoReparto();
    do
    {
        switch(SubMenu)
        {
            case 1:
                printf("MODIFICAR CHOFER \n");
                choferModificar = getChofer(repartoModificar);
                cambiarPersona(choferModificar, true);
            break;
            case 2:
                printf("MODIFICAR VEHICULO \n");
                vehiculoModificar = getVehiculo(repartoModificar);
                cambiarVehiculo(vehiculoModificar);
            break;
            case 3:
                printf("MODIFICAR FECHA DE SALIDA \n");
                fechaModificar = getFechaSalida(repartoModificar);
                actualizarFecha(fechaModificar);
            break;
            case 4:
                printf("MODIFICAR FECHA DE RETORNO \n");
                fechaModificar = getFechaRetorno(repartoModificar);
                actualizarFecha(fechaModificar);
            break;
            case 5:
                printf("MODIFICAR PAQUETE \n");
                ///mostrarPaquetesReparto(repartoModificar);
                printf("Seleccione un paquete ")
                cantidadPaquetesTotales = longitudPila(pilaPaquetes);
                for(int i=0;i<cantidadPaquetesTotales;i++)
                {
                    paquetes[i] = descargarPaquete(repartoModificar);
                }
                paqueteModificar = paquetes[iMod];
                cambiarPaquete(paqueteModificar);
                for(int i=cantidadPaquetesTotales;i>0;i--)
                {
                    cargarPaquete(repartoModificar,paquetes[i]);
                }
            break;
            default:
                mensajeError();
            break;
        }
        printf("\n\nDatos modificados exitosamente.\n\n");
        printf("Desea seguir modificando este vehiculo?\n\n");
        printf("\t1. SI\n\t");
        printf("0. NO\n\n");
        printf("Seleccione una opcion: ");
        scanf("%d",&seguirMod);
    }while(seguirMod!=0);
}



void menuModificarReparto(CentroLogisticoPtr centroLogistico)
{
    int iMod=0;
    int op=0;
    int MainMenu;
    int SubMenu;
    int DeseaContinuar = 0;
    int cantidadModificar;
    int verificacionElecciones;
    int PosicionInicial, PosicionFinal;
    int eleccionesModificar[100];
    RepartoPtr repartoModificar;
    ListaPtr listaAuxiliar = getRepartos(centroLogistico);
    PilaPtr pilaPaquetes = crearPila();
    int cantidadPaquetesTotales;
    PaquetePtr paquetes[100];
    do
    {
        system("cls");
        printf("MODIFICAR REPARTO \n");
        MainMenu = MenuTipoSeleccion();
        switch(MainMenu)
        {
            case 1:
                printf("Seleccione un indice de repartos: ");
                iMod = seleccionarNumero();
                repartoModificar = getDatoLista(listaAuxiliar,iMod);
                cambiarAtributoReparto(repartoModificar);
            break;
            case 2:
                printf("Seleccione una cantidad de indices de repartos: ");
                cantidadModificar = seleccionarNumero();
                for(int i=0;i<cantidadModificar;i++)
                {
                    printf("Indice numero %d: ");
                    eleccionesModificar[i] = seleccionarNumero();
                }
                for(int i=0;i<cantidadModificar;i++)
                {
                    if(verificarLimiteLista(listaAuxiliar, eleccionesModificar[i]))
                    {
                        verificacionElecciones++;
                    }
                }
                if(verificacionElecciones==5)
                {
                    for(int i=0;i<cantidadModificar;i++)
                    {
                        repartoModificar = getDatoLista(listaAuxiliar, eleccionesModificar[i]);
                        cambiarAtributoReparto(repartoModificar);
                    }
                }

            break;
            case 3:
                printf("Seleccione de indice a indice \n");
                printf("Primer indice: ");
                PosicionInicial = seleccionarNumero();
                printf("Segundo indice: ");
                PosicionFinal = seleccionarNumero();
                if(verificarLimiteLista(listaAuxiliar, PosicionFinal))
                {
                    for(int i=0;i<PosicionFinal-PosicionInicial+1;i++)
                    {
                        repartoModificar = getDatoLista(listaAuxiliar, i);
                        cambiarAtributoReparto(repartoModificar);
                    }
                }
            break;
        }

        DeseaContinuar = MenuDeseaContinuar();
    }while(DeseaContinuar!=0);
}

////////////////////////////////

FUNCIONES DE CARGADO

//////////////////////////////


void menuCargarPaquete(CentroLogisticoPtr centroLogistico)
{
    ///Variables para funciones
    int n=0;
    ///Paquete
    PaquetePtr paquete;
    int ID=0;   //el ID del paquete se genera automáticamente, no lo tiene que ingresar el usuario.
    int ancho=0;//el mismo se genera aleatoriamente.
    int alto=0;
    int largo=0;
    int peso=0;
    int DeseaContinuar;
        //Fecha
    FechaPtr fechaEntrega;
        //Domicilios
    DomicilioPtr dirRetiro;
    DomicilioPtr dirEntrega;
//por defecto, los paquetes se cargan con el estado 0: 'en depósito'.
    srand(time(NULL));
    do
    {
        system("cls");
        printf("\n\n PAQUETE \n\n");
        ID=rand(); //esto no se mostrará sino al final de la carga del paquete.
        printf("\tAncho: ");
        scanf("%d",&ancho);
        limpiarBufferTeclado();
        printf("\n\tAlto: ");
        scanf("%d",&alto);
        limpiarBufferTeclado();
        printf("\n\tLargo: ");
        scanf("%d",&largo);
        limpiarBufferTeclado();
        printf("\n\tPeso: ");
        scanf("%d",&peso);
        limpiarBufferTeclado();
        printf("\n\tDireccion de retiro:");
        cargarDomicilio(dirRetiro);
        printf("\n\tDireccion de entrega:");
        cargarDomicilio(dirEntrega);

        printf("\n\tFecha de entrega:");
        cargarFecha(fechaEntrega);

        paquete=crearPaquete(ID,ancho,alto,largo,peso,dirRetiro,dirEntrega,fechaEntrega,0);
        agregarPaquete(centroLogistico,paquete);

        printf("\n\nPaquete #%d cargado exitosamente.\n\n",ID);
        DeseaContinuar = MenuDeseaContinuar();
    }while(DeseaContinuar!=0);
}
void menuCargarPersona(CentroLogisticoPtr centroLogistico,bool esChofer)
{
    ///Variables para funciones
    int n=0;
    int DeseaContinuar;
    ///Cliente
    char nombre[100];
    char apellido[100];
    PersonaPtr persona;
        //Domicilio
    DomicilioPtr domicilio;
        //Cuil
    CuilPtr cuil;
    do
    {
    if(esChofer)
    {
        printf("CARGAR CHOFER\n\n");
    }
    else
    {
        printf("CARGAR CLIENTE\n\n");
    }
    if(esChofer)
        printf("CHOFER %d\n\n",i+1);
    else
        printf("CLIENTE %d\n\n",i+1);
        printf("\n\n\tNombre: ");
        scanf("%[^\n]%*c",nombre);
        limpiarBufferTeclado();
        printf("\n\tApellido: ");
        scanf("%[^\n]%*c",apellido);
        limpiarBufferTeclado();
        printf("\n\tDomicilio");
        cargarDomicilio(domicilio);
        cargarCuil(cuil);
        persona=crearPersona(nombre,apellido,domicilio,cuil,false);
        agregarPersona(centroLogistico,persona);
        if(esChofer)
        {
            printf("Cliente cargado exitosamente.\n\n");
        }
        else
        {
            printf("Cliente cargado exitosamente.\n\n");
        }
        DeseaContinuar = MenuDeseaContinuar();
    }while(DeseaContinuar!=0);
    if(esChofer)
        printf("Choferes cargados exitosamente.\n\n");
    else
        printf("Clientes cargados exitosamente.\n\n");
}
void menuCargarVehiculo(CentroLogisticoPtr centroLogistico)
{
    ///Variables para funciones
    int n=0;
    ///Vehiculo
    int tipoVehiculo=0;
    char marca[100];
    char modelo[100];
    char patente[100];
    VehiculoPtr vehiculo;
    int DeseaContinuar;
    do
    {
        system("cls");
        printf("CARGAR VEHICULO\n\n");
        helpTipoVehiculo();
        printf("\n\n\tSeleccione un Tipo: ");
        scanf("%d",&tipoVehiculo);
        limpiarBufferTeclado();
        printf("\n\n\tMarca: ");
        scanf("%[^\n]%*c",marca);
        printf("\n\tModelo: ");
        scanf("%[^\n]%*c",modelo);
        limpiarBufferTeclado();
        printf("\n\tPatente (AA 000 AA): ");
        scanf("%[^\n]%*c",patente);
        limpiarBufferTeclado();
        vehiculo=crearVehiculo(tipoVehiculo,marca,modelo,patente);
        agregarDatoLista(centroLogistico->listaVehiculos,(VehiculoPtr)vehiculo);
        printf("\n\nVehiculo cargado exitosamente.\n\n");
        DeseaContinuar = MenuDeseaContinuar();
    }while(DeseaContinuar!=0);
    printf("\n\nVehiculos cargados exitosamente.\n\n");
}


///////////////////////////////////////

AGREGUE LA OPCION DE DESEA CONTINUAR A 
TODAS LAS FUNCIONES DE MOSTRADO
DE CENTROLOGISTICO.C

///////////////////////////////////////

void mostrarPaquetes(CentroLogisticoPtr centroLogistico)
{
    int DeseaContinuar = 0;
    ListaPtr listaAux=crearLista();
    agregarLista(listaAux,getPaquetes(centroLogistico));
    int i=0;
    do
    {
        printf("\nLISTA DE PAQUETES: \n\n");
        while(!listaVacia(listaAux))
        {
            printf("%d. ",i+1);
            mostrarPaquete((PaquetePtr)getCabecera(listaAux));
            listaAux=getResto(listaAux);

            i++;
        }
        listaAux=destruirLista(listaAux,false);
        printf("\n");
        DeseaContinuar = MenuDeseaContinuar();
    }while(DeseaContinuar!=0);
}

void mostrarPersonas(CentroLogisticoPtr centroLogistico)
{
    int DeseaContinuar = 0;
    ListaPtr listaAux=crearLista();
    agregarLista(listaAux,getPersonas(centroLogistico));
    int i=0;
    do
    {
        system("cls");
        printf("\nLISTA DE PERSONAS: \n\n");
        while(!listaVacia(listaAux))
        {
            printf("%d. ",i+1);
            mostrarPersona((PersonaPtr)getCabecera(listaAux));
            listaAux=getResto(listaAux);

            i++;
        }
        listaAux=destruirLista(listaAux,false);
        printf("\n");
        DeseaContinuar = MenuDeseaContinuar();
    }while(DeseaContinuar!=0);
}
void mostrarClientes(CentroLogisticoPtr centroLogistico) //busca y muestra solo las personas cuyo esChofer==false.
{
    int DeseaContinuar = 0;
    ListaPtr listaAux=crearLista();
    agregarLista(listaAux,getPersonas(centroLogistico));
    int i=0;
    do
    {
        printf("\nLISTA DE CLIENTES: \n\n");
        while(!listaVacia(listaAux))
        {
            PersonaPtr personaAux=(PersonaPtr)getCabecera(listaAux);
            if(getEsChofer(personaAux)==false)
            {
                printf("%d. ",i+1);

                mostrarPersona(personaAux);
            }
            listaAux=getResto(listaAux);

            i++;
        }
        listaAux=destruirLista(listaAux,false);
        printf("\n");
        DeseaContinuar = MenuDeseaContinuar();
    }while(DeseaContinuar!=0);
}
void mostrarChoferes(CentroLogisticoPtr centroLogistico) //busca y muestra solo las personas cuyo esChofer==true.
{
    int DeseaContinuar = 0;
    ListaPtr listaAux=crearLista();
    agregarLista(listaAux,getPersonas(centroLogistico));
    int i=0;
    do
    {
        printf("\nLISTA DE CHOFERES: \n\n");
        while(!listaVacia(listaAux))
        {
            PersonaPtr personaAux=(PersonaPtr)getCabecera(listaAux);
            if(getEsChofer(personaAux))
            {
                printf("%d. ",i+1);

                mostrarPersona(personaAux);
            }
            listaAux=getResto(listaAux);

            i++;
        }
        listaAux=destruirLista(listaAux,false);
        printf("\n");
        DeseaContinuar = MenuDeseaContinuar();
    }while(DeseaContinuar!=0);
}

void mostrarVehiculos(CentroLogisticoPtr centroLogistico)
{
    ListaPtr listaAux=crearLista();
    agregarLista(listaAux,getVehiculos(centroLogistico));

    int i=0;

    printf("\nLISTA DE VEHICULOS: \n\n");
    while(!listaVacia(listaAux))
    {
        printf("%d. ",i+1);

        mostrarVehiculo((VehiculoPtr)getCabecera(listaAux));
        listaAux=getResto(listaAux);

        i++;
    }
    listaAux=destruirLista(listaAux,false);
    printf("\n");
}

void mostrarRepartos(CentroLogisticoPtr centroLogistico, bool esRepartoAbierto)
{
    int DeseaContinuar = 0;
    ListaPtr listaAux=crearLista();
    do
    {
        system("cls");
        if(esRepartoAbierto)
        {
            listaAux = getRepartos(centroLogistico,true);
            printf("\nLISTA DE REPARTOS ABIERTOS: \n\n");
        }
        else
        {
            listaAux = getRepartos(centroLogistico,false);
            printf("\nLISTA DE REPARTOS CERRADOS: \n\n");
            printf("--- ADVERTENCIA PARA EL USUARIO --- \n");
            printf("Los elementos que vera a continuacion (Repartos cerrados) \n");
            printf("Son un registro de los repartos abiertos, son solo una \n");
            printf("Ilustracion del contenido que poseian estos repartos \n");
            printf("[Estan sujetos a posibles modificaciones en el transcurso del reparto] \n\n\n");
        }

        int i=0;
        while(!listaVacia(listaAux))
        {
            printf("%d. ",i+1);

            mostrarReparto((RepartoPtr)getCabecera(listaAux));
            ListaPtr listaADestruir=listaAux;
            listaAux=getResto(listaAux);
            listaADestruir=destruirLista(listaADestruir,false);

            i++;
        }
        listaAux=destruirLista(listaAux,false);
        printf("\n");
        DeseaContinuar = MenuDeseaContinuar();
    }while(DeseaContinuar!=0);
}

void mostrarRepartosPorFechaDeSalida(CentroLogisticoPtr centroLogistico) ///Solo funciona con repartos abiertos
{
    int DeseaContinuar = 0;
    ordenarPorFechaSalida(centroLogistico,true);
    ListaPtr listaAux=crearLista();
    agregarLista(listaAux,getRepartos(centroLogistico,true));
    int i=0;
    do
    {
        printf("\nLISTA DE REPARTOS POR FECHA DE SALIDA: \n\n");
        while(!listaVacia(listaAux))
        {
            printf("%d. ",i+1);

            mostrarRepartoSinPaquetes((RepartoPtr)getCabecera(listaAux));
            listaAux=getResto(listaAux);

            i++;
        }
        listaAux=destruirLista(listaAux,false);
        printf("\n");
        DeseaContinuar = MenuDeseaContinuar();
    }while(DeseaContinuar!=0);
}


/////////////////////////////////////////////////

FUNCION REMODELADA DE CERRAR REPARTO

/////////////////////////////////////////////////



