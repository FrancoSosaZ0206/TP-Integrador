///--------------------------------------------------------------------------------------------///
///--------------------------------------------------------------------------------------------///

			///UTILES PARA SIMPLIFICAR CODIGO///
					MENUS.C
				///LINEA 441 A 490///
				///LINEA 664 A 674///

///--------------------------------------------------------------------------------------------///
///--------------------------------------------------------------------------------------------///


int seleccionarCantidad(){
    int eleccion=0;
    fflush(stdin);
    printf("Seleccione una cantidad:");
    scanf("%d",&eleccion);
    fflush(stdin);
    return eleccion;
}

int seleccionarNumero(){
    int eleccion=0;
    fflush(stdin);
    printf("Seleccione una numero:");
    scanf("%d",&eleccion);
    fflush(stdin);
    return eleccion;
}

bool verificarLimiteLista(ListaPtr lista, int eleccion){
    bool valido;
    int tamanioLista=longitudLista(lista);
    if(tamanioLista!=0){
        if(eleccion>=0 && eleccion<tamanioLista){
            valido=true;
        }else{
            printf("Eleccion invalida\n");
            printf("La lista que ha seleccionado no posee ese indice\n");
            valido=false;
        }
    }else{
        printf("La lista que desea visualizar no posee elementos\n");
        valido=false;
    }
    return valido;
}

int menuSeleccionEliminar(){
    int eleccion;
    fflush(stdin);
    printf("1. Seleccionar indice unico\n");
    printf("2. Seleccionar indice a indice (4 - 7)\n");
    printf("Opcion: ");
    scanf("%d",&eleccion);
    fflush(stdin);
    return eleccion;
}


void mensajeError(){
    system("cls");
    fflush(stdin);
    printf("No ha seguido las instrucciones indicadas\n");
    printf("El servicio procedera a realizar la ejecucion de salida\n");
    printf("Volviendo al menu seleccionado\n");
    fflush(stdin);
    system("pause");
    system("cls");
}



///-------------------------------------------------------------------------------------------------///
///-------------------------------------------------------------------------------------------------///
///-------------------------------------------------------------------------------------------------///
///-------------------------------------------------------------------------------------------------///

		  ///FUNCIONES MAS ESPECIFICAS(LAS USO POR COMODIDAD)///	
	    ///NO UTILIZO LISTA PERSONAS, SINO LISTACHOFERES Y LISTACLIENTES///	
				  MENUS.C///LINEA 448 A 454///
			CENTROLOGISTICO.C///LINEA 74 A 81///
			CENTROLOGISTICO.C///LINEA 748 A 804///

///-------------------------------------------------------------------------------------------------///
///-------------------------------------------------------------------------------------------------///
///-------------------------------------------------------------------------------------------------///
///-------------------------------------------------------------------------------------------------///



PersonaPtr removerCliente(CentroLogisticoPtr centroLogistico, int posicion){
    return (PersonaPtr)removerDeLista(getClientes(centroLogistico),posicion);
}

PersonaPtr removerChofer(CentroLogisticoPtr centroLogistico, int posicion){
    return (PersonaPtr)removerDeLista(getChoferes(centroLogistico), posicion);
}

ListaPtr getClientes(CentroLogisticoPtr centroLogistico){
    return centroLogistico->listaClientes;
}
ListaPtr getChoferes(CentroLogisticoPtr centroLogistico){
    return centroLogistico->listaChoferes;
}


void menuBuscarRepartoPorFechaSalida(CentroLogisticoPtr centroLogistico, bool esRepartoAbierto){
    int diaBuscar,mesBuscar,anioBuscar,horaBuscar,minutoBuscar,cantidadEncontrados=0,posicionEncontrado=0,i=0,cantidad;
    cantidad=seleccionarCantidad();
    for(int i=0;i<cantidad;i++){
        system("cls");
        fflush(stdin);
        printf("Seleccione la fecha de salida a buscar [D/M/A H:M]: ");
        scanf("%d %d %d %d %d", &diaBuscar,&mesBuscar,&anioBuscar,&horaBuscar,&minutoBuscar);
        fflush(stdin);
        ListaPtr listaRepartos=getRepartos(centroLogistico,esRepartoAbierto);
        ListaPtr listaAuxiliar=listaRepartos;
        RepartoPtr repartoAuxiliar;
        while(!listaVacia(listaAuxiliar)){
	    cantidadEncontrados=0;
            repartoAuxiliar=getCabecera(listaAuxiliar);
            if(diaBuscar==getDia(getFechaSalida(repartoAuxiliar)))
                cantidadEncontrados++;
            if(mesBuscar==getMes(getFechaSalida(repartoAuxiliar)))
                cantidadEncontrados++;
            if(anioBuscar==getAnio(getFechaSalida(repartoAuxiliar)))
                cantidadEncontrados++;
            if(horaBuscar==getHora(getFechaSalida(repartoAuxiliar)))
                cantidadEncontrados++;
            if(minutoBuscar==getMinuto(getFechaSalida(repartoAuxiliar)))
                cantidadEncontrados++;
            if(cantidadEncontrados==5)
                posicionEncontrado=i;
            mostrarReparto(getDatoLista(listaRepartos,posicionEncontrado));
            listaAuxiliar=getResto(listaAuxiliar);
            i++;
        }
    }
}

void menuBuscarRepartoPorFechaRetorno(CentroLogisticoPtr centroLogistico, bool esRepartoAbierto){
    int diaBuscar,mesBuscar,anioBuscar,horaBuscar,minutoBuscar,cantidadEncontrados=0,posicionEncontrado=0,i=0,cantidad;
    cantidad=seleccionarCantidad();
    for(int i=0;i<cantidad;i++){
        system("cls");
        fflush(stdin);
        printf("Seleccione la fecha de retorno a buscar [D/M/A H:M]: ");
        scanf("%d %d %d %d %d", &diaBuscar,&mesBuscar,&anioBuscar,&horaBuscar,&minutoBuscar);
        fflush(stdin);
        ListaPtr listaRepartos=getRepartos(centroLogistico,esRepartoAbierto);
        ListaPtr listaAuxiliar=listaRepartos;
        RepartoPtr repartoAuxiliar;
        while(!listaVacia(listaAuxiliar)){
	    cantidadEncontrados=0;
            repartoAuxiliar=getCabecera(listaAuxiliar);
            if(diaBuscar==getDia(getFechaRetorno(repartoAuxiliar)))
                cantidadEncontrados++;
            if(mesBuscar==getMes(getFechaRetorno(repartoAuxiliar)))
                cantidadEncontrados++;
            if(anioBuscar==getAnio(getFechaRetorno(repartoAuxiliar)))
                cantidadEncontrados++;
            if(horaBuscar==getHora(getFechaRetorno(repartoAuxiliar)))
                cantidadEncontrados++;
            if(minutoBuscar==getMinuto(getFechaRetorno(repartoAuxiliar)))
                cantidadEncontrados++;
            if(cantidadEncontrados==5)
                posicionEncontrado=i;
            mostrarReparto(getDatoLista(listaRepartos,posicionEncontrado));
            listaAuxiliar=getResto(listaAuxiliar);
            i++;
        }
    }
}


///--------------------------------------------------------------------------------------------///
///--------------------------------------------------------------------------------------------///
///--------------------------------------------------------------------------------------------///

		///FUNCIONES DE ELIMINAR PAQUETE,CHOFER,CLIENTE,REPARTO,VEHICULO///
					MENUS.C
				   ///LINEA 440 A 675///
			///LINEA 1190 A 1224 (ELIMINAR REPARTO)///


///--------------------------------------------------------------------------------------------///
///--------------------------------------------------------------------------------------------///
///--------------------------------------------------------------------------------------------///

void menuEliminarPaqueteNuevo(CentroLogisticoPtr centroLogistico){
    int iElim=0,cantidad=0,Main=0,posicionInicial=0,posicionFinal=0,eleccion=0;
    ListaPtr listaPaquetes=getPaquetes(centroLogistico);
    Main=menuSeleccionEliminar();
    switch(Main){
    case 1:
        cantidad=seleccionarCantidad();
        for(int i=0;i<cantidad;i++){
            system("cls");
            mostrarPaquetes(centroLogistico);
            iElim=seleccionarNumero();
            if(verificarLimiteLista(getPaquetes(centroLogistico),iElim)){
                removerPaquete(centroLogistico,iElim);
            }
        }
        break;
    case 2:
        cantidad=seleccionarCantidad();
        for(int i=0;i<cantidad;i++){
            system("cls");
            mostrarPaquetes(centroLogistico);
            printf("Seleccionar primer y segundo indice {1 - 3}\n");
            posicionInicial=seleccionarNumero();
            posicionFinal=seleccionarNumero();
            if(verificarLimiteLista(listaPaquetes,posicionInicial)){
                if(verificarLimiteLista(listaPaquetes,posicionFinal)){
                    for(int i=0;i<posicionFinal-posicionInicial+1;i++){
                        removerPaquete(centroLogistico,posicionInicial);
                    }
                }
            }
        }
        break;
    default:
        mensajeError();
        break;
    }
}



void menuEliminarClienteNuevo(CentroLogisticoPtr centroLogistico){
    int posicionEliminar,cantidad,Main,posicionInicial,posicionFinal;
    ListaPtr listaClientes=getClientes(centroLogistico);
    Main=menuSeleccionEliminar();
    switch(Main){
    case 1:
        cantidad=seleccionarCantidad();
        for(int i=0;i<cantidad;i++){
            system("cls");
            mostrarClientes(centroLogistico);
            posicionEliminar=seleccionarNumero();
            if(verificarLimiteLista(listaClientes,posicionEliminar)){
                removerCliente(centroLogistico,posicionEliminar);
            }
        }
        break;
    case 2:
        cantidad=seleccionarCantidad();
        for(int i=0;i<cantidad;i++){
            system("cls");
            mostrarClientes(centroLogistico);
            printf("Seleccionar indice a indice [1 - 3]\n");
            posicionInicial=seleccionarNumero();
            posicionFinal=seleccionarNumero();
            if(verificarLimiteLista(listaClientes,posicionInicial)){
                if(verificarLimiteLista(listaClientes,posicionFinal)){
                    for(int i=0;i<posicionFinal-posicionInicial+1;i++){
                        removerCliente(centroLogistico,posicionInicial);
                    }
                }
            }
        }
        break;
    default:
        mensajeError();
        break;
    }
}




void menuEliminarChoferNuevo(CentroLogisticoPtr centroLogistico){
    int posicionEliminar,posicionInicial,posicionFinal,cantidad,Main;
    ListaPtr listaChoferes=getChoferes(centroLogistico);
    Main=menuSeleccionEliminar();
    switch(Main){
    case 1:
        cantidad=seleccionarCantidad();
        for(int i=0;i<cantidad;i++){
            posicionEliminar=seleccionarNumero();
            if(verificarLimiteLista(listaChoferes,posicionEliminar)){
                removerChofer(centroLogistico,posicionEliminar);
            }
        }
        break;
    case 2:
        cantidad=seleccionarCantidad();
        for(int i=0;i<cantidad;i++){
            printf("Seleccionar de indice a indice [1 - 3]\n");
            posicionInicial=seleccionarNumero();
            posicionFinal=seleccionarNumero();
            if(verificarLimiteLista(listaChoferes,posicionInicial)){
                if(verificarLimiteLista(listaChoferes,posicionFinal)){
                    for(int i=0;i<posicionFinal-posicionInicial+1;i++){
                        removerChofer(centroLogistico,posicionInicial);
                    }
                }
            }
        }
        break;
    default:
        mensajeError();
        break;
    }
}



void menuEliminarVehiculoNuevo(CentroLogisticoPtr centroLogistico){
    int posicionEliminar,posicionInicial,posicionFinal,cantidad,Main;
    ListaPtr listaVehiculos=getVehiculos(centroLogistico);
    Main=menuSeleccionEliminar();
    switch(Main){
        case 1:
            cantidad=seleccionarCantidad();
            for(int i=0;i<cantidad;i++){
                posicionEliminar=seleccionarNumero();
                if(verificarLimiteLista(listaVehiculos,posicionEliminar)){
                    removerVehiculo(centroLogistico,posicionEliminar);
                }
            }
            break;
        case 2:
            cantidad=seleccionarCantidad();
            for(int i=0;i<cantidad;i++){
                printf("Selecione el primer y segundo indice [1 - 3]\n");
                posicionInicial=seleccionarNumero();
                posicionFinal=seleccionarNumero();
                if(verificarLimiteLista(listaVehiculos,posicionInicial)){
                    if(verificarLimiteLista(listaVehiculos,posicionFinal)){
                        for(int i=0;i<posicionFinal-posicionInicial+1;i++){
                            removerVehiculo(centroLogistico,posicionInicial);
                        }
                    }
                }
            }
            break;
        default:
            mensajeError();
            break;
    }
}

void menuEliminarRepartoNuevo(CentroLogisticoPtr centroLogistico, bool esRepartoAbierto){
    int Main,posicionEliminar,posicionInicial,posicionFinal,cantidad;
    ListaPtr listaRepartos=getRepartos(centroLogistico,esRepartoAbierto);
    Main=menuSeleccionEliminar();
    switch(Main){
    case 1:
        cantidad=seleccionarCantidad();
        for(int i=0;i<cantidad;i++){
            posicionEliminar=seleccionarNumero();
            if(verificarLimiteLista(listaRepartos,posicionEliminar)){
                removerReparto(centroLogistico,posicionEliminar,esRepartoAbierto);
            }
        }
        break;
    case 2:
        cantidad=seleccionarCantidad();
        for(int i=0;i<cantidad;i++){
            printf("Seleccione en formato indice a indice [1 - 3]\n");
            posicionInicial=seleccionarNumero();
            posicionFinal=seleccionarNumero();
            if(verificarLimiteLista(listaRepartos,posicionInicial)){
                if(verificarLimiteLista(listaRepartos,posicionFinal)){
                    for(int i=0;i<posicionFinal-posicionInicial+1;i++){
                        removerReparto(centroLogistico,posicionInicial,esRepartoAbierto);
                    }
                }
            }
        }
        break;
    default:
        mensajeError();
        break;
    }
}


///-------------------------------------------------------------------------------------------------///
///-------------------------------------------------------------------------------------------------///
///-------------------------------------------------------------------------------------------------///
///-------------------------------------------------------------------------------------------------///

///		SECCION ESPECIAL DE REPARTOS	
///				MENUS.C	
///			FUNCION PARA:		
///				MODIFICAR EL RESULTADO DE UNA ENTREGA
///				PARA BUSCAR MEDIANTE INDICE, CUIL DEL CHOFER, O PATENTE DEL VEHICULO
///				CERRAR UN REPARTO
/// 			     ///LINEA 1137 A 1367///					

///-------------------------------------------------------------------------------------------------///
///-------------------------------------------------------------------------------------------------///
///-------------------------------------------------------------------------------------------------///
///-------------------------------------------------------------------------------------------------///




int menuBuscadoRepartoNuevo(){
    int eleccion;
    fflush(stdin);
    printf("Buscar reparto mediante\n");
    printf("1. El indice\n");
    printf("2. Cuil del chofer\n");
    printf("3. Patente del vehiculo\n");
    printf("0. Volver\n");
    printf("Opcion: ");
    scanf("%d",&eleccion);
    fflush(stdin);
    return eleccion;
}

int seleccionarEstadoRepartoNuevo(){
    int eleccion;
    fflush(stdin);
    helpEstadoPaquete();
    printf("Eleccion: ");
    scanf("%d",&eleccion);
    fflush(stdin);
    return eleccion;
}

void modificarEstadoPaqueteNuevo(CentroLogisticoPtr centroLogistico, int posicionEncontrado){
    int eleccion;
    system("cls");
    RepartoPtr repartoActualizar=getDatoLista(getRepartos(centroLogistico,true),posicionEncontrado);
    ///mostrarPaquetesListaReparto(repartoActualizar);
    posicionEncontrado=menuBuscarPaqueteReparto(centroLogistico,repartoActualizar);
    if(posicionEncontrado!=-1){
        system("cls");
        PaquetePtr paqueteActualizar=getDatoLista(getListaPaquetesReparto(repartoActualizar),posicionEncontrado);
        eleccion=seleccionarEstadoReparto();
        setEstado(paqueteActualizar,eleccion);
    }else{
        printf("No existe tal paquete\n");
        system("pause");
    }
}

void menuActualizarRepartoNuevo(CentroLogisticoPtr centroLogistico){
    int MAIN=0,posicionEncontrado=0,eleccion=0;
    char cuilBuscar[100];
    char patenteBuscar[100];
    do{
        system("cls");
        ///mostrarRepartos(centroLogistico,true);
        MAIN=menuBuscadoReparto();
        switch(MAIN){
        case 1:
            printf("Seleccione un reparto para actualizar mediante su indice: ");
            scanf("%d",&eleccion);
            posicionEncontrado=buscarReparto(centroLogistico,eleccion);
            if(posicionEncontrado!=-1)
                modificarEstadoPaquete(centroLogistico,posicionEncontrado);
            else{
                printf("Reparto inexistente\n");
                system("pause");
            }
            break;
        case 2:
            system("cls");
            fflush(stdin);
            printf("Seleccione un reparto para actualizar mediante el cuil del chofer: ");
            scanf("%[^\n]%*c",cuilBuscar);
            fflush(stdin);
            posicionEncontrado=buscarChoferRepartos(centroLogistico,cuilBuscar);
            if(posicionEncontrado!=-1)
                modificarEstadoPaquete(centroLogistico,posicionEncontrado);
            else{
                printf("No existe este reparto con este chofer\n");
                system("pause");
            }
            break;
        case 3:
            system("cls");
            fflush(stdin);
            printf("Seleccione un reparto para actualizar mediante la patente del vehiculo: ");
            scanf("%[^\n]%*c",patenteBuscar);
            fflush(stdin);
            posicionEncontrado=buscarVehiculoRepartos(centroLogistico,patenteBuscar);
            if(posicionEncontrado!=-1)
                modificarEstadoPaquete(centroLogistico,posicionEncontrado);
            else{
                printf("No existe este reparto con este vehiculo\n");
                system("pause");
            }
            break;
        }
    }while(MAIN!=0);
}

void menuCerrarRepartoNuevo(CentroLogisticoPtr centroLogistico){
    int cantidad,Main,posicionInicial,posicionFinal,posicionEliminar;
    ListaPtr listaRepartos=getRepartos(centroLogistico,true);
    RepartoPtr repartoAuxiliar;
    Main=menuSeleccionEliminar();
    switch(Main){
    case 1:
        cantidad=seleccionarNumero();
        for(int i=0;i<cantidad;i++){
            posicionEliminar=seleccionarNumero();
            if(verificarLimiteLista(listaRepartos,posicionEliminar)){
                repartoAuxiliar=removerReparto(centroLogistico,posicionEliminar,true);
                agregarReparto(centroLogistico,repartoAuxiliar,false);
            }
        }
        break;
    case 2:
        cantidad=seleccionarCantidad();
        for(int i=0;i<cantidad;i++){
            printf("Selecciona indice a indice [1 - 3]\n");
            posicionInicial=seleccionarNumero();
            posicionFinal=seleccionarNumero();
            if(verificarLimiteLista(listaRepartos,posicionInicial)){
                if(verificarLimiteLista(listaRepartos,posicionFinal)){
                    for(int i=0;i<posicionFinal-posicionInicial+1;i++){
                        repartoAuxiliar=removerReparto(centroLogistico,posicionInicial,true);
                        agregarReparto(centroLogistico,repartoAuxiliar,false);
                    }
                }
            }
        }
        break;
    default:
        mensajeError();
        break;
    }
}


void menuMostrarEntregasRepartoNuevo(CentroLogisticoPtr centroLogistico, bool esRepartoAbierto){
    int eleccion=0;
    int tamanioLista=longitudLista(getRepartos(centroLogistico,esRepartoAbierto));
    if(tamanioLista!=0){
        mostrarRepartos(centroLogistico, esRepartoAbierto);
        fflush(stdin);
        printf("Seleccione un reparto mediante su indice: ");
        scanf("%d",&eleccion);
        system("cls");
        if(eleccion>=0 && eleccion<tamanioLista)
            mostrarPaquetesListaReparto(getDatoLista(getRepartos(centroLogistico,esRepartoAbierto), eleccion));
        else
            printf("Ese reparto es inexistente\n");
    }else
        printf("No hay repartos para mostrar\n");
}

///---------------------------------------------------------------------------///
///---------------------------------------------------------------------------///
///---------------------------------------------------------------------------///
///---------------------------------------------------------------------------///
///---------------------------------------------------------------------------///

            ///SECCION DE UTILIZACION DE ARCHIVOS///
        ///TODAS LAS FUNCIONES EN ADELANTE FUNCIONAN///
			FILES.C
		///LINEA 1286 A 1635///

///---------------------------------------------------------------------------///
///---------------------------------------------------------------------------///
///---------------------------------------------------------------------------///
///---------------------------------------------------------------------------///


FechaPtr PasajeFechaDinamico(fFechaPtr FE, FechaPtr FD, bool ADinamico){
    if(ADinamico){
        FD=crearFechaDirectNuevo(FE);
    }else{
        FE->dia=getDiaNatural(FD);
        FE->mes=getMesNatural(FD);
        FE->anio=getAnioNatural(FD);
        FE->hora=getHoraNatural(FD);
        FE->minuto=getMinutoNatural(FD);
    }
    return FD;
}

DomicilioPtr PasajeDomicilioDinamico(fDomicilioPtr DE, DomicilioPtr DD, bool ADinamico){
    if(ADinamico){
        DD=crearDomicilio(DE->calle,DE->altura,DE->localidad);
    }else{
        strcpy(DE->calle,DD->calle);
        DE->altura=DD->altura;
        strcpy(DE->localidad,DD->localidad);
    }
    return DD;
}

CuilPtr PasajeCuilDinamico(fCuilPtr CE, CuilPtr CD, bool ADinamico){
    if(ADinamico){
        CD=crearCuil(CE->cuil);
    }else{
        strcpy(CE->cuil,CD->cuil);
    }
    return CD;
}
///---------------------------------------------------------------------------///
VehiculoPtr PasajeVehiculoDinamico(fVehiculoPtr VE, VehiculoPtr VD, bool ADinamico){
    if(ADinamico){
        VD=crearVehiculoDirectNuevo(VE);
    }else{
        VE->tipo=VD->tipo;
        strcpy(VE->marca,VD->marca);
        strcpy(VE->modelo,VD->modelo);
        strcpy(VE->patente,VD->patente);
    }
    return VD;
}
void GuardarListaVehiculosNuevo(ListaPtr listaVehiculos){
    FILE* arch;
    arch=fopen("VehiculosPrueba.bin","wb");
    fclose(arch);
    arch=fopen("VehiculosPrueba.bin","ab");
    fVehiculo VE;
    VehiculoPtr VD;
    ListaPtr LA=listaVehiculos;
    while(!listaVacia(LA)){
        VD=getCabecera(LA);
        PasajeVehiculoDinamico(&VE,VD,false);
        fwrite(&VE,sizeof(fVehiculo),1,arch);
        LA=getResto(LA);
    }
    fclose(arch);
}
ListaPtr LeerListaVehiculosNuevo(){
    FILE* arch;
    fVehiculo VE;
    VehiculoPtr VD;
    ListaPtr LV=crearLista();
    arch=fopen("VehiculosPrueba.bin","rb");
    fread(&VE,sizeof(fVehiculo),1,arch);
    while(!feof(arch)){
        VD=PasajeVehiculoDinamico(&VE,VD,true);
        agregarDatoLista(LV,(VehiculoPtr)VD);
        fread(&VE,sizeof(fVehiculo),1,arch);
    }
    fclose(arch);
    if(mostradoActivado){
        ListaPtr LA=LV;
        while(!listaVacia(LA)){
            VD=getCabecera(LA);
            mostrarVehiculo(VD);
            LA=getResto(LA);
        }
        system("pause");
    }
    return LV;
}

///-----------------------------------------------------------------------///

PersonaPtr PasajePersonaDinamico(fPersonaPtr PE, PersonaPtr PD, bool ADinamico){
    if(ADinamico){
        PD=crearPersonaDirectNuevo(PE);
    }else{
        strcpy(PE->nombre ,PD->nombre);
        strcpy(PE->apellido,PD->apellido);
        PasajeDomicilioDinamico(&PE->domicilio,PD->domicilio,false);
        strcpy(PE->cuil,PD->cuil->cuil);
    }
    return PD;
}

void GuardarListaClientesNuevo(ListaPtr listaClientes){
    FILE* arch;
    fPersona PE;
    PersonaPtr PD;
    ListaPtr LA=listaClientes;
    /*
    if(esChoferes){
        arch=fopen("ChoferesPrueba.bin","wb");
        fclose(arch);
        arch=fopen("ChoferesPrueba.bin","ab");
    }else{
        arch=fopen("ClientesPrueba.bin","wb");
        fclose(arch);
        arch=fopen("ClientesPrueba.bin","ab");
    }
    */
    arch=fopen("ClientesPrueba.bin","wb");
    fclose(arch);
    arch=fopen("ClientesPrueba.bin","ab");
    while(!listaVacia(LA)){
        PD=getCabecera(LA);
        PasajePersonaDinamico(&PE,PD,false);
        fwrite(&PE,sizeof(fPersona),1,arch);
        LA=getResto(LA);
    }
    fclose(arch);
}

ListaPtr LeerListaClientesNuevo(){
    FILE* arch;
    fPersona PE;
    PersonaPtr PD;
    ListaPtr LC=crearLista();
    /*
    if(esChoferes){
        arch=fopen("ChoferesPrueba.bin","rb");
    }else{
        arch=fopen("ClientesPrueba.bin","rb");
    }
    */
    arch=fopen("ClientesPrueba.bin","rb");
    fread(&PE,sizeof(fPersona),1,arch);
    while(!feof(arch)){
        PD=PasajePersonaDinamico(&PE,PD,true);
        agregarDatoLista(LC,(PersonaPtr)PD);
        fread(&PE,sizeof(fPersona),1,arch);
    }
    fclose(arch);
    if(mostradoActivado){
        ListaPtr LA=LC;
        while(!listaVacia(LA)){
            PD=getCabecera(LA);
            mostrarPersona(PD);
            LA=getResto(LA);
        }
        system("pause");
    }
    return LC;
}



void GuardarListaChoferesNuevo(ListaPtr listaChoferes){
    FILE* arch;
    fPersona PE;
    PersonaPtr PD;
    ListaPtr LA=listaChoferes;
    arch=fopen("ChoferesPrueba.bin","wb");
    fclose(arch);
    arch=fopen("ChoferesPrueba.bin","ab");
    while(!listaVacia(LA)){
        PD=getCabecera(LA);
        PasajePersonaDinamico(&PE,PD,false);
        fwrite(&PE,sizeof(fPersona),1,arch);
        LA=getResto(LA);
    }
    fclose(arch);
}

ListaPtr LeerListaChoferesNuevo(){
    FILE* arch;
    fPersona PE;
    PersonaPtr PD;
    ListaPtr LC=crearLista();
    arch=fopen("ChoferesPrueba.bin","rb");
    fread(&PE,sizeof(fPersona),1,arch);
    while(!feof(arch)){
        PD=PasajePersonaDinamico(&PE,PD,true);
        agregarDatoLista(LC,(PersonaPtr)PD);
        fread(&PE,sizeof(fPersona),1,arch);
    }
    fclose(arch);
    if(mostradoActivado){
        ListaPtr LA=LC;
        while(!listaVacia(LA)){
            PD=getCabecera(LA);
            mostrarPersona(PD);
            LA=getResto(LA);
        }
        system("pause");
    }
    return LC;
}
///-----------------------------------------------------------------------///


PaquetePtr PasajePaqueteDinamico(fPaquetePtr PE, PaquetePtr PD, bool ADinamico){
    if(ADinamico){
        PD=crearPaqueteDirectNuevo(PE);
    }else{
        PE->ID=PD->ID;
        PE->alto=PD->alto;
        PE->ancho=PD->ancho;
        PE->largo=PD->largo;
        PE->peso=PD->peso;
        PE->estado=PD->estado;
        PasajeDomicilioDinamico(&PE->dirRetiro,PD->dirRetiro,false);
        PasajeDomicilioDinamico(&PE->dirEntrega,PD->dirEntrega,false);
        PasajeFechaDinamico(&PE->fechaEntrega,PD->fechaEntrega,false);
        PasajePersonaDinamico(&PE->cliente,PD->cliente,false);
    }
    return PD;
}


void GuardarListaPaquetesNuevo(ListaPtr listaPaquetes){
    FILE* arch;
    fPaquete PE;
    PaquetePtr PD;
    ListaPtr LA=listaPaquetes;
    arch=fopen("PaquetesPrueba.bin","wb");
    fclose(arch);
    arch=fopen("PaquetesPrueba.bin","ab");
    while(!listaVacia(LA)){
        PD=getCabecera(LA);
        PasajePaqueteDinamico(&PE,PD,false);
        fwrite(&PE,sizeof(fPaquete),1,arch);
        LA=getResto(LA);
    }
    fclose(arch);
}

ListaPtr LeerListaPaquetesNuevo(){
    FILE* arch;
    fPaquete PE;
    PaquetePtr PD;
    ListaPtr LP=crearLista();
    arch=fopen("PaquetesPrueba.bin","rb");
    fread(&PE,sizeof(fPaquete),1,arch);
    while(!feof(arch)){
        PD=PasajePaqueteDinamico(&PE,PD,true);
        agregarDatoLista(LP,(PaquetePtr)PD);
        fread(&PE,sizeof(fPaquete),1,arch);
    }
    fclose(arch);
    if(mostradoActivado){
        ListaPtr LA=LP;
        while(!listaVacia(LA)){
            PD=getCabecera(LA);
            mostrarPaquete(PD);
            LA=getResto(LA);
        }
        system("pause");
    }
    return LP;
}

///-----------------------------------------------------------------------///


RepartoPtr PasajeRepartoDinamico(fRepartoPtr RE, RepartoPtr RD, bool ADinamico){
    if(ADinamico){
        RD=crearRepartoDirectoNuevo(RE);
    }else{
        PasajePersonaDinamico(&RE->chofer,RD->chofer,false);
        PasajeVehiculoDinamico(&RE->vehiculo,RD->vehiculo,false);
        PasajeFechaDinamico(&RE->fechaSalida,RD->fechaSalida,false);
        PasajeFechaDinamico(&RE->fechaRetorno,RD->fechaRetorno,false);
        int total=longitudLista(getListaPaquetesReparto(RD));
        RE->totalPaquetes=total;
        ListaPtr LA=getListaPaquetesReparto(RD);
        PaquetePtr PD;
        int i=0;
        while(!listaVacia(LA)){
            PD=getCabecera(LA);
            PasajePaqueteDinamico(&RE->paquetes[i],PD,false);
            LA=getResto(LA);
            i++;
        }
    }
    return RD;
}

void GuardarListaRepartosNuevo(ListaPtr listaRepartos){
    FILE* arch;
    fReparto RE;
    RepartoPtr RD;
    ListaPtr LA=listaRepartos;
    arch=fopen("RepartosPrueba.bin","wb");
    fclose(arch);
    arch=fopen("RepartosPrueba.bin","ab");
    while(!listaVacia(LA)){
        RD=getCabecera(LA);
        PasajeRepartoDinamico(&RE,RD,false);
        fwrite(&RE,sizeof(fReparto),1,arch);
        LA=getResto(LA);
    }
    fclose(arch);
}

ListaPtr LeerListaRepartosNuevo(){
    FILE* arch;
    fReparto RE;
    RepartoPtr RD;
    ListaPtr LR=crearLista();
    arch=fopen("RepartosPrueba.bin","rb");
    fread(&RE,sizeof(fReparto),1,arch);
    while(!feof(arch)){
        RD=PasajeRepartoDinamico(&RE,RD,true);
        agregarDatoLista(LR,(RepartoPtr)RD);
        fread(&RE,sizeof(fReparto),1,arch);
    }
    fclose(arch);
    ListaPtr LA=LR;
    if(mostradoActivado){
        while(!listaVacia(LA)){
            RD=getCabecera(LA);
            mostrarReparto(RD);
            LA=getResto(LA);
        }
        system("pause");
    }
    return LR;
}
