////////////////////////////////////////////////////////////////////////////////////////////////////////

					FILES.H

////////////////////////////////////////////////////////////////////////////////////////////////////////

//Funcion de escritura
//Precondicion: centroLogistico debe haber sido creado anteriormente con crearCentroLogistico
//Postcondicion: guarda en el archivo correspondiente segun la variable esRepartoAbierto
//si es true (esRepartoAbierto) se guardara en un archivo Lista de Repartos Abiertos.txt
//en caso contrario (!esRepartoAbiero) se guardara en un archivo Lista de Repartos Cerrados.txt
//Parametros: puntero a la estructura centro logistico
//valor booleano true=es un reparto abierto false=es un reparto cerrado
//Devuelve true si se pudo guardar exitosamente, false en caso contrario
bool guardarListaRepartos(CentroLogisticoPtr centroLogistico, bool esRepartoAbierto);


//Funcion de lectura
//Precondicion: centroLogistico debe haber sido creado anteriormente con crearCentroLogistico
//Postcondicion: lee las estructuras reparto que hayan sido grabadas en el archivo segun la variable
//esRepartoAbierto, si es true se leeran los repartos de Lista de Repartos Abiertos.txt
//en caso contrario se leeran los repartos de Lista de Repartos Cerrados.txt
//Parametros: puntero a la estructura centro logistico
//valor booleano que define si se quiere acceder a los repartos abiertos o cerrados: true:false
//Devuelve true si se pudo leer exitosamente, false en caso contrario
bool abrirListaRepartos(CentroLogisticoPtr centroLogistico, bool esRepartoAbierto);


////////////////////////////////////////////////////////////////////////////////////////////////////////

					CENTROLOGISTICO.H

////////////////////////////////////////////////////////////////////////////////////////////////////////

//Funcion de ordenamiento
//Precondicion: centroLogistico debe haber sido creado anteriormente con crearCentroLogistico
//Postcondicion: setea dentro de centro logistico todos los vehiculos ordenados alfabeticamente 
//Parametros: puntero a la estructura centro logistico
//Devuelve vacio
void ordenarPorMarca(CentroLogisticoPtr centroLogistico);

//Funcion de ordenamiento
//Precondicion: centroLogistico debe haber sido creado anteriormente con crearCentroLogistico
//Postcondicion: setea dentro de centro logistico todos los paquetes ordenados segun su ID
//Parametros: puntero a la estructura centro logistico
//Devuelve vacio
void ordenarPorID(CentroLogisticoPtr centroLogistico);


//Funcion getter
//Precondicion: centroLogistico debe haber sido creado anteriormente con crearCentroLogistico
//Postcondicion: devuelve un puntero a las listas segun repartosAbiertos
//true retorna la lista de repartos abiertos, false retorna la lista de repartos cerrados
//Parametros: puntero a la estructura centro logistico
//Devuelve un puntero a lista
ListaPtr getRepartos(CentroLogisticoPtr centroLogistico, bool repartosAbiertos);

//Funcion setter
//Precondicion: centroLogistico debe haber sido creado anteriormente con crearCentroLogistico
//Postcondicion: asigna una lista pasada por referencia de la unidad repartos
//ubicandola segun repartosAbiertos, true la asigna en repartosAbiertos, false en repartosCerrados
//Parametros: puntero a la estructura centro logistico
//puntero a la lista de repartos
//valor booleano representando repartos abiertos o cerrados
//Devuelve vacio
void setRepartos(CentroLogisticoPtr centroLogistico, ListaPtr repartos, bool repartosAbiertos);

//Funcion de agregado
//Precondicion: centroLogistico debe haber sido creado anteriormente con crearCentroLogistico
//reparto debe haber sido creado con crearReparto en memoria dinamica
//Postcondicion: agrega un reparto a la lista segun repartosAbiertos, si es true la agrega
//en repartosAbiertos, si es false la agrega en repartosCerrados
//Parametros: puntero a la estructura centroLogistico
//puntero a la estructura reparto
//valor booleano representando si es repartosAbiertos o repartosCerrados
//Devuelve vacio
void agregarReparto(CentroLogisticoPtr centroLogistico, RepartoPtr reparto, bool repartosAbiertos);

//Funcion de mostrado
//Precondicion: centroLogistico debe haber sido creado anteriormente con crearCentroLogistico
//Postcondicion: muestra por pantalla los repartos segun repartosAbiertos, si es
//true mostrara los repartosAbiertos, si es false mostrara los repartosCerrados
//Parametros: puntero a la estructura centro logistico
//valor booleano representando los repartos abiertos y cerrados
//Devuelve vacio
void mostrarRepartos(CentroLogisticoPtr centroLogistico, bool repartosAbiertos); 

//Funcion de remocion
//Precondicion: centroLogistico debe haber sido creado anteriormente con crearCentroLogistico
//Postcondicion: remueve de la lista de repartosAbiertos de centroLogistico un reparto 
//seleccionado por el usuario, desplazando el reparto a listaRepartosCerrados
//Parametros:
//  centroLogistico: puntero a la estructura centro logistico
//  posicion: entero representando la posicion del reparto a cerrar.
//Devuelve vacio
void cerrarReparto(CentroLogisticoPtr centroLogistico, int posicion);

////////////////////////////////////////////////////////////////////////////////////////////////////////

					MENUES.H

////////////////////////////////////////////////////////////////////////////////////////////////////////

//Funcion de menu
//Precondicion: centroLogistico debe haber sido creado anteriormente con crearCentroLogistico
//Postcondicion: despliega una serie de opciones de menues y submenues que permiten mostrar por 
//pantalla los repartos abiertos y cerrados en las categorias de totales, particular, y filtrados por fecha
//Parametros: puntero a la estructura centro logistico
//Devuelve vacio
void menuMostrarRepartos(CentroLogisticoPtr centroLogistico);



////////////////////////////////////////////////////////////////////////////////////////////////////////

					CENTROLOGISTICO.C

////////////////////////////////////////////////////////////////////////////////////////////////////////



ListaPtr getRepartos(CentroLogisticoPtr centroLogistico, bool repartosAbiertos)
{
	if(repartosAbiertos)
		return centroLogistico->repartosAbiertos;
	else 
		return centroLogistico->repartosCerrados;
}

void setRepartos(CentroLogisticoPtr centroLogistico, ListaPtr repartos, bool repartosAbiertos)
{
	if(repartosAbiertos)
		centroLogistico->repartosAbiertos = repartos;
	else 
		centroLogistico->repartosCerrados = repartos;
}

void agregarReparto(CentroLogisticoPtr centroLogistico, RepartoPtr reparto, bool repartosAbiertos)
{
	if(repartosAbiertos)
		agregarDato(getRepartos(centroLogistico,true), reparto);
	else 
		agregarDato(getRepartos(centroLogistico,false), reparto);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////

					FILES.C

////////////////////////////////////////////////////////////////////////////////////////////////////////

bool guardarlistaRepartos(CentroLogisticoPtr centroLogistico, bool esRepartoAbierto)
{
    FILE *archivo;
	if(esRepartoAbierto) 
		archivo = fopen("Lista de Repartos Abiertos.txt","w");
	else 
		archivo = fopen("Lista de Repartos Cerrados.txt","w");
	
    if(archivo == NULL) 
		return false;
    else{
        int n;///guardamos primero la cantidad de elementos de la lista
		
		if(esRepartoAbierto) 
			n = longitudLista(getRepartos(centroLogistico));
		else 
			n = longitudLista(getRepartos(centroLogistico));
		
        fwrite(&n,sizeof(int),1,archivo);
        fReparto freparto;
        ListaPtr listaAux = crearLista();
		
        if(esRepartoAbierto) 
			agregarLista(listaAux,getRepartos(centroLogistico));
		else 
			agregarLista(listaAux,getRepartos(centroLogistico));
		
        while(!listaVacia(listaAux))
		{
            RepartoPtr repartoAux = (RepartoPtr)getCabecera(listaAux);
            fsetReparto(&freparto, repartoAux, true);
            fwrite(&freparto, sizeof(fReparto), 1, archivo);
            listaAux = getResto(listaAux);
        }
		
        listaAux = destruirLista(listaAux, false);
        fclose(archivo);
        return true;
    }
}


bool abrirlistaRepartos(CentroLogisticoPtr centroLogistico, bool esRepartoAbierto)
{
    FILE *archivo;
	if(esRepartoAbierto)
		archivo = fopen("Lista de Repartos Abiertos.txt","r");
	else 
		archivo = fopen("Lista de Repartos Cerrados.txt","r");

    if(archivo==NULL)
        return false;
    else
    {
        int n; ///recuperamos primero la cantidad de elementos de la lista
        fread(&n,sizeof(int),1,archivo);

        fReparto freparto;
        RepartoPtr repartoAux = NULL;

        for(int i=0;i<n;i++)
        {
            fread(&freparto,sizeof(fReparto),1,archivo);

            fsetReparto(&freparto,repartoAux,false);
            agregarReparto(centroLogistico,repartoAux);
        }
		
        fclose(archivo);
        return true;
    }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////

					CENTROLOGISTICO.C

////////////////////////////////////////////////////////////////////////////////////////////////////////

void ordenarPorMarca(CentroLogisticoPtr centroLogistico)
{
    int i=0;
    ListaPtr listaVehiculos=crearLista();
    listaVehiculos = getVehiculos(centroLogistico);
    ListaPtr listaAux = crearLista();
    int longitudlistaVehiculos = longitudLista(listaVehiculos);
    VehiculoPtr vehiculos[longitudLista(listaVehiculos)];
    VehiculoPtr vehiculoAux; 
	
    while(!listaVacia(listaVehiculos))
    {
        vehiculos[i] = getCabecera(listaVehiculos);
        PtrLista listaADestruir = listaVehiculos;
        listaVehiculos = getResto(listaVehiculos);
        i++;
    }
    destruirLista(listaVehiculos, false); 
	
    for(int i=0; i<longitudlistaVehiculos-1 ; i++){
        for(int j=i; j<longitudlistaVehiculos-1; j++){
            if(strcmp(getMarca(getDatoLista(listaVehiculos,j)), getMarca(getDatoLista(listaVehiculos,j+1))) == 0){
                vehiculoAux = vehiculos[j];
                vehiculos[j] = vehiculos[j+1];
                vehiculos[j+1] = vehiculoAux;
            }
        }
    }
	
    ListaPtr listaNuevaVehiculos = crearLista();
    for(int i=0; i<longitudlistaVehiculos ; i++){
        agregarDatoLista(listaNuevaVehiculos, vehiculos[i]);
    }
	
    setVehiculos(centroLogistico, listaNuevaVehiculos);
    listaAux = destruirLista(listaAux,true);
    listaVehiculos = destruirLista(listaVehiculos, true);
}

void ordenarPorID(CentroLogisticoPtr centroLogistico)
{
    int i=0;
    ListaPtr listaPaquetes = crearLista();
    listaPaquetes = getPaquetes(centroLogistico);
    ListaPtr listaAux = crearLista();
    int longitudlistaVehiculos = longitudLista(listaPaquetes);
    PaquetePtr paquetes[longitudLista(listaPaquetes)];
    PaquetePtr paqueteAux; 
	
    while(!listaVacia(listaPaquetes))
    {
        paquetes[i] = getCabecera(listaPaquetes);
        PtrLista listaADestruir = listaPaquetes;
        listaPaquetes = getResto(listaPaquetes);
        i++;
    }
    destruirLista(listaPaquetes, false); 
	
    for(int i=0; i<longitudlistaVehiculos-1 ; i++){
        for(int j=i; j<longitudlistaVehiculos-1; j++){
            if(getID(getDatoLista(listaPaquetes,j)) > getID(getDatoLista(listaPaquetes,j+1))){
                paqueteAux = paquetes[j];
                paquetes[j] = paquetes[j+1];
                paquetes[j+1] = paqueteAux;
            }
        }
    }
	
    ListaPtr listaNuevaPaquetes = crearLista();
    for(int i=0; i<longitudlistaVehiculos ; i++){
        agregarDatoLista(listaNuevaPaquetes, paquetes[i]);
    }
	
    setPaquetes(centroLogistico, listaNuevaPaquetes);
    listaAux = destruirLista(listaAux,true);
    listaPaquetes = destruirLista(listaPaquetes, true);
}


void mostrarRepartos(CentroLogisticoPtr centroLogistico, bool repartosAbiertos)
{
    ListaPtr listaRepartos = crearLista();
	if(repartosAbiertos)
		listaRepartos = getRepartos(centroLogistico);
	else 
		listaRepartos = getRepartos(centroLogistico);

	agregarLista(listaAux, listaRepartos);
	while(!listaVacia(listaAux))
    {
		printf("Reparto Nro: %d\n", i+1);
        RepartoPtr repartoAux = (RepartoPtr)getCabecera(listaAux);
		mostrarReparto(repartoAux);
        ListaPtr listaADestruir = listaAux;
        listaAux = getResto(listaAux);
        listaADestruir = destruirLista(listaADestruir, false);
        i++;
    }
	listaRepartos = destruirLista(listaRepartos, false);
}

void cerrarReparto(CentroLogisticoPtr centroLogistico)
{
	int eleccion, cantidadRepartosAbiertos;
	RepartoPtr repartoRemover;
	ListaPtr listaRepartosAbiertos = crearLista();
	listaRepartosAbiertos = getRepartos(centroLogistico, true);
	cantidadRepartosAbiertos = longitudLista(listaRepartosAbiertos);
	mostrarRepartos(centroLogistico, true);
	
	fflush(stdin);
	printf("Seleccione un reparto por su indice para remover:");
	scanf("%d",&eleccion);
	fflush(stdin);
	
	if(eleccion>-1 && eleccion<cantidadRepartosAbiertos)
	{
		repartoRemover = removerDeLista(listaRepartosAbiertos, eleccion-1);
		printf("Reparto removido exitosamente\n");
		agregarDato(getRepartos(centroLogistico,true),(RepartoPtr)repartoRemover);
		printf("Reparto cerrado exitosamente\n");
	}	
	else 
		printf("Lamento informarle que ese reparto no existe\n");
	
	listaRepartosAbiertos = destruirLista(listaRepartosAbiertos, false);
}

**************************PENDIENTE**************************

////////////////////////////////////////////////////////////////////////////////////////////////////////

					MENUES.C

////////////////////////////////////////////////////////////////////////////////////////////////////////

void menuMostrarRepartos(CentroLogisticoPtr centroLogistico)
{	
	int eleccion;
	fflush(stdin);
	system("cls");
	printf("1. Mostrar reparto particular\n");
	printf("2. Mostrar filtrados por fecha\n");
	printf("3. Mostrar repartos totales\n");
	printf("Eleccion:");
	scanf("%d",&eleccion);
	fflush(stdin);
	switch(eleccion)
	{
		case 1:
			fflush(stdin);
			system("cls");
			printf("Seccion de repartos abiertos\n");
			printf("1. Mostrar reparto particular\n");
			printf("2. Mostrar filtrados por fecha\n");
			printf("3. Mostrar repartos totales\n");
			printf("Eleccion:");
			scanf("%d",&eleccion);
			fflush(stdin);
				switch()
				{
					case 1:
						mostrarRepartosAbiertos(centroLogistico);
				
						fflush(stdin);
						printf("\nSeleccione un reparto para mostrar:");
						scanf("%d",&eleccion);
						fflush(stdin);
				
						if(eleccion>-1 && eleccion<longitudLista(listaRepartos))
							mostrarReparto(getDatoLista(getRepartos(centroLogistico,true),eleccion-1));

						system("pause");
					break;
					case 2:
						ordenarPorFechas(centroLogistico);
						mostrarRepartos(centroLogistico, true);
						system("pause");
					break;
					case 3:
						mostrarRepartos(centroLogistico, true);
						system("pause");
					break;
				}
		break;
			
		case 2:
				fflush(stdin);
				system("cls");
				printf("Seccion de repartos cerrados\n");
				printf("1. Mostrar reparto particular\n");
				printf("2. Mostrar filtrados por fecha\n");
				printf("3. Mostrar repartos totales\n");
				printf("Eleccion:");
				scanf("%d",&eleccion);
				fflush(stdin);
				
					switch()
					{
						case 1:
							mostrarRepartosAbiertos(centroLogistico);
							
							fflush(stdin);
							printf("\nSeleccione un reparto para mostrar:");
							scanf("%d",&eleccion);
							fflush(stdin);
					
							if(eleccion>-1 && eleccion<longitudLista(listaRepartos))
								mostrarReparto(getDatoLista(getRepartos(centroLogistico,false),eleccion-1));

							system("pause");
						break;
						case 2:
							ordenarPorFechas(centroLogistico);
							mostrarRepartos(centroLogistico, false);
							system("pause");
						break;
						case 3:
							mostrarRepartos(centroLogistico, false);
							system("pause");
						break;
					}
		break;
	}
}

****************AGREGADO DESDE ARRIBA HASTA ACÁ****************

////////////////////////////////////////////////////////////////////////////////////////////////////////

					MENUES.C

////////////////////////////////////////////////////////////////////////////////////////////////////////

void menuMostrarEntregasReparto(CentroLogisticoPtr centroLogistico, bool esRepartoAbierto)
{
    int eleccion;
    ListaPtr listaRepartos = crearLista();
    PilaPtr pilaPaquetes = crearPila();
    ListaPtr listaPaquetes = crearLista();
    RepartoPtr repartoAux;
    PaquetePtr paqueteAux;
    listaRepartos = getRepartos(centroLogistico, esRepartoAbierto);
    mostrarRepartos(centroLogistico, esRepartoAbierto);
    do
    {
        limpiarBufferTeclado();
        printf("Seleccione un reparto mediante su indice: ");
        printf("Eleccion: ");
        scanf("%d",&eleccion);
        limpiarBufferTeclado();
    }while(eleccion < 0);
    system("cls");
    repartoAux = getDatoLista(listaRepartos, eleccion-1);
    pilaPaquetes = getPaquetesReparto(repartoAux);
    while(!pilaVacia(pilaPaquetes))
    {
        paqueteAux = desapilar(pilaPaquetes);
        agregarDatoLista(listaPaquetes, (PaquetePtr)paqueteAux);
    }
    int i=0;
    while(i != longitudLista(listaPaquetes))
    {
        printf("Indice %d\n", i);
        mostrarPaquete(getDatoLista(listaAux, i));
        i++;
    }
    while(i != 0)
    {
        paqueteAux = getDatoLista(listaPaquetes, i);
        apilar(pilaPaquetes, (PaquetePtr)paqueteAux);
        i--;
    }
    listaRepartos = destruirLista(listaRepartos, false);
    listaPaquetes = destruirLista(listaRepartos, false);
}



void menuBuscarReparto(CentroLogisticoPtr centroLogistico, bool esRepartoAbierto)
{
    int eleccion;
    ListaPtr listaRepartos = crearLista();
    RepartoPtr repartoAux;
    listaRepartos = getRepartos(centroLogistico, esRepartoAbierto);
    mostrarRepartos(centroLogistico, esRepartoAbierto);
    do
    {
        limpiarBufferTeclado();
        //Para devolver el reparto o para mostrarlo
        printf("Selecciona un reparto por su indice: ");
        scanf("%d",&eleccion);
        limpiarBufferTeclado();
    }while(eleccion < 0);
    repartoAux = getDatoLista(listaRepartos, eleccion-1);
    //return repartoAux; Por si se quiere el reparto
    //mostrarReparto(repartoAux); // por si se quiere mostrar simplemente
    listaRepartos = destruirLista(listaRepartos, false);
}


void menuEliminarReparto(CentroLogisticoPtr centroLogistico, bool esRepartoAbierto)
{
    int eleccion;
    ListaPtr listaRepartos = crearLista();
    RepartoPtr repartoAux;
    listaRepartos = getRepartos(centroLogistico, esRepartoAbierto);
    mostrarRepartos(centroLogistico, esRepartoAbierto);
    do
    {
        limpiarBufferTeclado();
        //Para remvoerlo de la lista
        printf("Selecciona un reparto por su indice: ");
        scanf("%d",&eleccion);
        limpiarBufferTeclado();
    }while(eleccion < 0);
    repartoAux = removerDeLista(listaRepartos, eleccion-1);
    //return repartoAux; Por si se quiere el reparto
    //mostrarReparto(repartoAux); // por si se quiere mostrar simplemente
    listaRepartos = destruirLista(listaRepartos, false);
}


void menuCerrarReparto(CentroLogisticoPtr centroLogistico)
{
    int eleccion, totalPaquetes, i;
    ListaPtr listaAbiertos = crearLista();
    ListaPtr listaCerrados = crearLista();
    ListaPtr listaPaquetes = crearLista();
    PilaPtr pilaPaquetes = crearPila();
    RepartoPtr repartoAux;
    PaquetePtr paqueteAux;
    listaAbiertos = getRepartos(centroLogistico, true);
    mostrarRepartos(centroLogistico, true);
    do
    {
        limpiarBufferTeclado();
        //Para seleccionar el reparto
        printf("Selecciona un reparto por su indice: ");
        scanf("%d",&eleccion);
        limpiarBufferTeclado();
    }while(eleccion < 0 && eleccion > longitudLista(listaAbiertos));
    pilaPaquetes = getPaquetesReparto(repartoAux);
    while(!pilaVacia(pilaPaquetes))
    {
        paqueteAux = desapilar(pilaPaquetes);
        agregarDatoLista(listaPaquetes, (PaquetePtr)paqueteAux)
    }
    totalPaquetes = longitudLista(listaPaquetes);
    i = 0;
    while(i <= totalPaquetes)
    {
        paqueteAux = getDatoLista(listaPaquetes, i);
        if(getEstado(paqueteAux) != 0 && getEstado(paqueteAux) != 3)
        {
            setEstado(paqueteAux, 0);
            agregarDatoLista(listaPaquetes, paqueteAux);
        }
        i++;
    }
    i = totalPaquetes;
    while(i > -1)
    {
        paqueteAux = getDatoLista(listaPaquetes, i);
        apilar(pilaPaquetes, (PaquetePtr)paqueteAux);
        i--;
    }
    repartoAux = removerDeLista(listaAbiertos, eleccion-1);
    agregarDatoLista(listaCerrados,(RepartoPtr)repartoAux);

    listaAbiertos = destruirLista(listaAbiertos, false);
    listaCerrados = destruirLista(listaCerrados, false);
    listaPaquetes = destruirLista(listaPaquetes, false);
    pilaPaquetes = destruirPila(pilaPaquetes);
}


void menuActualizarReparto(CentroLogisticoPtr centroLogistico, bool esRepartoAbierto)
{
    int eleccion, i;
    ListaPtr listaRepartos = crearLista();
    ListaPtr listaPaquetes = crearLista();
    PilaPtr pilaPaquetes = crearPila();
    PaquetePtr paqueteAux;
    RepartoPtr repartoAux;
    listaRepartos = getRepartos(centroLogistico, esRepartoAbierto);
    mostrarRepartos(centroLogistico, esRepartoAbierto);
    do
    {
        limpiarBufferTeclado();
        //Para modificar el reparto
        printf("Selecciona un reparto por su indice: ");
        scanf("%d",&eleccion);
        limpiarBufferTeclado();
    }while(eleccion < 0 && eleccion > longitudLista(listaRepartos));
    repartoAux = getDatoLista(listaRepartos, eleccion-1);
    pilaPaquetes = getPaquetesReparto(repartoAux);
    while(!pilaVacia)
    {
        paqueteAux = desapilar(pilaPaquetes);
        mostrarPaquete(paqueteAux);
        agregarDatoLista(listaPaquetes, paqueteAux);
    }
    do
    {
        limpiarBufferTeclado();
        //Para modificar el paquete
        printf("Selecciona un paquete por su indice: ");
        scanf("%d",&eleccion);
        limpiarBufferTeclado();
    }while(eleccion < 0 && eleccion > longitudLista(listaPaquetes));
    system("cls");
    paqueteAux = getDatoLista(listaPaquetes, eleccion-1);
    helpEstadoPaquete();
    do
    {
        limpiarBufferTeclado();
        printf("Seleccione un estado mediante su indice: ");
        printf("Eleccion: ");
        scanf("%d",&eleccion);
        limpiarBufferTeclado();
    }while(eleccion < 0 && eleccion < 4);
    system("cls");
    limpiarBufferTeclado();
    setEstado(paqueteAux, eleccion);
    i=longitudLista(listaPaquetes);
    while(i != -1)
    {
        paqueteAux = getDatoLista(listaPaquetes, i);
        apilar(pilaPaquetes, paqueteAux);
        i--;
    }
    listaRepartos = destruirLista(listaRepartos, false);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////

					MENUES.H

////////////////////////////////////////////////////////////////////////////////////////////////////////


//OPERACION: Crear un reparto en la lista
//PRECONDICIÓN: centroLogistico debe haber sido creado previamente con crearCentroLogistico
//POSTCONDICION: crea una unidade de repartoPtr en la cual se seleccionaran los elementos
//acumulados de los archivos de choferes, paquetes, y vehiculos para poner en marcha
//el reparto, todos los elementos seran seleccionados por el usuario
//PARÁMETROS:
//          puntero a la estructura centro logistico
//DEVUELVE: vacio
void menuArmarReparto(CentroLogisticoPtr centroLogistico);
//OPERACION: Busqueda de un reparto en la lista
//PRECONDICIÓN: centroLogistico debe haber sido creado anteriormente con crearCentroLogistico
//POSTCONDICION: buscara dentro de los repartos abiertos o cerrados un reparto en particular
//este sera solicitado de manera numerica por el usuario, buscando dentro de la lista de repartos
//abiertos de centro logistico
//PARÁMETROS: puntero a centro logistico
//variable logica que determina a que lista de repartos se iniciara la busqueda
//DEVUELVE: vacio
void menuBuscarReparto(CentroLogisticoPtr centroLogistico, bool esRepartoAbierto);
//OPERACION: eliminacion de reparto
//PRECONDICIÓN: centroLogistico debe haber sido creado previamente con crearCentroLogistico
//POSTCONDICION: eliminara un reparto seleccionado mediante el indice por el usuario,
//mostrandolos por pantalla, el cual removera el reparto en esa posicion de los existentes
//PARÁMETROS: puntero a centro logistico
//variable logica que determina a que lista de repartos se iniciara la busqueda
//DEVUELVE: vacio
void menuEliminarReparto(CentroLogisticoPtr centroLogistico, bool esRepartoAbierto);
//OPERACION: cerrar reparto
//PRECONDICIÓN: centroLogistico debe haber sido creado previamente con crearCentroLogistico
//POSTCONDICION: se solicitara por pantalla la seleccion de un reparto por parte del usuario
//para remover de los repartos abiertos a los cerrados, devolviendo aquellos que no han sido entregados
//PARÁMETROS: puntero a centro logistico
//variable logica que determina a que lista de repartos se iniciara la busqueda
//DEVUELVE: vacio
void menuCerrarReparto(CentroLogisticoPtr centroLogistico);
//OPERACION: actualizar reparto
//PRECONDICIÓN: centroLogistico debe haber sido creado previamente con crearCentroLogistico
//POSTCONDICION: se le solicitara al usuario un reparto para modificar su estado
//posteriormente se le solicitara un indice para seleccionar un paquete y
//actualizarle el estado mediante una representacion numerica ingresada por consola
//PARÁMETROS: puntero a centro logistico
//variable logica que determina a que lista de repartos se iniciara la busqueda
//DEVUELVE: vacio
void menuActualizarReparto(CentroLogisticoPtr centroLogistico, bool esRepartoAbierto);

//OPERACION: menú de muestra de repartos
//PRECONDICIÓN: centroLogistico debe haber sido creado anteriormente con crearCentroLogistico
//POSTCONDICION: despliega una serie de opciones de menues y submenues que permiten mostrar por
//               pantalla los repartos abiertos y cerrados en las categorias de totales, particular, y filtrados por fecha
//PARÁMETROS:
//  centroLogistico: puntero a la estructura centro logistico
//DEVUELVE: nada.
void menuMostrarRepartos(CentroLogisticoPtr centroLogistico,bool esRepartoAbierto);


//OPERACION: menú de muestra de entregas de un solo reparto
//PRECONDICIÓN: centroLogistico debe haber sido creado anteriormente con crearCentroLogistico
//POSTCONDICION: despliega una serie de opciones de menues y submenues que permiten mostrar por
//               pantalla los repartos abiertos unicamente, se le solicitara al usuario que seleccione un
//               reparto para mostrar sus entregas, y asi poder seleccionar una entrega modificando
//               su valor de estado, 0 deposito, 1 en curso, 2 cancelado, 3 entregado
//PARÁMETROS:
//  centroLogistico: puntero a la estructura centro logistico
// variable logica para saber si son abiertos o cerrados los repartos
//DEVUELVE: nada.
void menuMostrarEntregasReparto(CentroLogisticoPtr centroLogistico, bool esRepartoAbierto)

////////////////////////////////////////////////////////////////////////////////////////////////////////

					MAIN.C

////////////////////////////////////////////////////////////////////////////////////////////////////////

            printf("Seccion de repartos\n\n");

            printf("1. Repartos abiertos\n");
            printf("2. Repartos cerrados\n");
            printf("0. Volver\n");
            printf("-1. MENU PRINCIPAL\n");
            printf("\n-----------------------------------------\n\n");

            printf("Elija una opcion: ");
            scanf("%d", &op2);
            limpiarBufferTeclado();
            switch(op2)
            {
                case 1:
                    do
                    {
                        printf("Repartos abiertos\n");

                        printf("1. Armar reparto\n");
                        printf("2. Eliminar reparto\n"); //Borramos su existencia (cerrados y abiertos)
                        printf("3. Mostrar repartos\n"); //Plural
                        printf("4. Buscar reparto\n"); //Particular
                        printf("5. Cerrar un reparto\n");//Lo cambiamos de lista de abierto a cerrado
                        printf("0. Volver\n");
                        printf("-1. MENU PRINCIPAL\n");
                        printf("\n-----------------------------------------\n\n");

                        printf("Elija una opcion: ");
                        scanf("%d", &op3);
                        limpiarBufferTeclado();
                    switch(op3)
                    {
                        case 1:
                            menuArmarReparto(centroLogistico);
                        break;
                        case 2:
                            menuEliminarReparto(centroLogistico, true);
                        break;
                        case 3:
                            mostrarRepartos(centroLogistico, true);
                        break;
                        case 4:
                            menuMostrarEntregasReparto(centroLogistico, true);
                        break;
                        case 5:
                            menuCerrarReparto(centroLogistico);
                        break;

                        default:
                        printf("\nOpcion incorrecta.\n\n");
                        presionarEnterYLimpiarPantalla();
                        break;
                    }
                } while(op3!=0);
            break;

            case 2:
                    do
                    {
                        printf("Repartos cerrados\n");

                        printf("1. Armar reparto\n");
                        printf("2. Eliminar reparto\n"); //Borramos su existencia (cerrados y abiertos)
                        printf("3. Mostrar repartos\n"); //Plural
                        printf("4. Buscar reparto\n"); //Particular
                        printf("0. Volver\n");
                        printf("-1. MENU PRINCIPAL\n");
                        printf("\n-----------------------------------------\n\n");

                        printf("Elija una opcion: ");
                        scanf("%d", &op3);
                        limpiarBufferTeclado();
                    switch(op3)
                    {
                        case 1:
                            menuArmarReparto(centroLogistico);
                        break;
                        case 2:
                            menuEliminarReparto(centroLogistico, true);
                        break;
                        case 3:
                            mostrarRepartos(centroLogistico, true);
                        break;
                        case 4:
                            menuMostrarEntregasReparto(centroLogistico, true);
                        break;

                        default:
                        printf("\nOpcion incorrecta.\n\n");
                        presionarEnterYLimpiarPantalla();
                        break;
                    }
                } while(op3!=0);
            break;
            }
        break;
        case 3:
            printf("Seccion de repartos\n\n");

            printf("1. Repartos abiertos\n");
            printf("2. Repartos cerrados\n");
            printf("0. Volver\n");
            printf("-1. MENU PRINCIPAL\n");
            printf("\n-----------------------------------------\n\n");

            printf("Elija una opcion: ");
            scanf("%d", &op2);
            limpiarBufferTeclado();
            switch(op2)
            {
            case 1:
                menuActualizarReparto(centroLogistico, true);
                break;
            case 2:
                menuActualizarReparto(centroLogistico, false);
                break;
            }
            break;